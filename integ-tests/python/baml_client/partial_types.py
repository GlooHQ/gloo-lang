###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################


class BigNumbers(BaseModel):
    
    
    a: Optional[int]
    b: Optional[float]

class BinaryNode(BaseModel):
    
    
    data: Optional[int]
    left: Optional["BinaryNode"] = None
    right: Optional["BinaryNode"] = None

class Blah(BaseModel):
    
    
    prop4: Optional[str] = None

class BlockConstraint(BaseModel):
    
    
    foo: Optional[int]
    bar: Optional[str]

class BlockConstraintForParam(BaseModel):
    
    
    bcfp: Optional[int]
    bcfp2: Optional[str]

class BookOrder(BaseModel):
    
    
    orderId: Optional[str]
    title: Optional[str]
    quantity: Optional[int]
    price: Optional[float]

class ClassOptionalOutput(BaseModel):
    
    
    prop1: Optional[str]
    prop2: Optional[str]

class ClassOptionalOutput2(BaseModel):
    
    
    prop1: Optional[str] = None
    prop2: Optional[str] = None
    prop3: Optional["Blah"] = None

class ClassWithImage(BaseModel):
    
    
    myImage: Optional[baml_py.Image]
    param2: Optional[str]
    fake_image: Optional["FakeImage"]

class CompoundBigNumbers(BaseModel):
    
    
    big: Optional["BigNumbers"]
    big_nums: List["BigNumbers"]
    another: Optional["BigNumbers"]

class ContactInfo(BaseModel):
    
    
    primary: Optional[Union["PhoneNumber", "EmailAddress"]]
    secondary: Optional[Union["PhoneNumber", "EmailAddress", Optional[None]]] = None

class CustomTaskResult(BaseModel):
    
    
    bookOrder: Optional[Union["BookOrder", Optional[None]]] = None
    flightConfirmation: Optional[Union["FlightConfirmation", Optional[None]]] = None
    groceryReceipt: Optional[Union["GroceryReceipt", Optional[None]]] = None

class DummyOutput(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    nonce: Optional[str]
    nonce2: Optional[str]

class DynInputOutput(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    testKey: Optional[str]

class DynamicClassOne(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    

class DynamicClassTwo(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    hi: Optional[str]
    some_class: Optional["SomeClassNestedDynamic"]
    status: Optional[Union[types.DynEnumOne, str]]

class DynamicOutput(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    

class Earthling(BaseModel):
    
    
    age: Checked[Optional[int],Literal["earth_aged", "no_infants"]]

class Education(BaseModel):
    
    
    institution: Optional[str]
    location: Optional[str]
    degree: Optional[str]
    major: List[Optional[str]]
    graduation_date: Optional[str] = None

class Email(BaseModel):
    
    
    subject: Optional[str]
    body: Optional[str]
    from_address: Optional[str]

class EmailAddress(BaseModel):
    
    
    value: Optional[str]

class Event(BaseModel):
    
    
    title: Optional[str]
    date: Optional[str]
    location: Optional[str]
    description: Optional[str]

class FakeImage(BaseModel):
    
    
    url: Optional[str]

class FlightConfirmation(BaseModel):
    
    
    confirmationNumber: Optional[str]
    flightNumber: Optional[str]
    departureTime: Optional[str]
    arrivalTime: Optional[str]
    seatNumber: Optional[str]

class FooAny(BaseModel):
    
    
    planetary_age: Optional[Union["Martian", "Earthling"]]
    certainty: Checked[Optional[int],Literal["unreasonably_certain"]]
    species: Checked[Optional[str],Literal["regex_bad", "regex_good", "trivial"]]

class Forest(BaseModel):
    
    
    trees: List["Tree"]

class GroceryReceipt(BaseModel):
    
    
    receiptId: Optional[str]
    storeName: Optional[str]
    items: List[Optional[Union[Optional[str], Optional[int], Optional[float]]]]
    totalAmount: Optional[float]

class InnerClass(BaseModel):
    
    
    prop1: Optional[str]
    prop2: Optional[str]
    inner: Optional["InnerClass2"]

class InnerClass2(BaseModel):
    
    
    prop2: Optional[int]
    prop3: Optional[float]

class InputClass(BaseModel):
    
    
    key: Optional[str]
    key2: Optional[str]

class InputClassNested(BaseModel):
    
    
    key: Optional[str]
    nested: Optional["InputClass"]

class LinkedList(BaseModel):
    
    
    head: Optional["Node"] = None
    len: Optional[int]

class LiteralClassHello(BaseModel):
    
    
    prop: Literal["hello"]

class LiteralClassOne(BaseModel):
    
    
    prop: Literal["one"]

class LiteralClassTwo(BaseModel):
    
    
    prop: Literal["two"]

class MalformedConstraints(BaseModel):
    
    
    foo: Checked[Optional[int],Literal["foo_check"]]

class MalformedConstraints2(BaseModel):
    
    
    foo: Optional[int]

class Martian(BaseModel):
    
    
    age: Checked[Optional[int],Literal["young_enough"]]

class NamedArgsSingleClass(BaseModel):
    
    
    key: Optional[str]
    key_two: Optional[bool]
    key_three: Optional[int]

class Nested(BaseModel):
    
    
    prop3: Optional[Union[Optional[str], Optional[None]]] = None
    prop4: Optional[Union[Optional[str], Optional[None]]] = None
    prop20: Optional["Nested2"]

class Nested2(BaseModel):
    
    
    prop11: Optional[Union[Optional[str], Optional[None]]] = None
    prop12: Optional[Union[Optional[str], Optional[None]]] = None

class NestedBlockConstraint(BaseModel):
    
    
    nbc: Checked[Optional["BlockConstraint"],Literal["cross_field"]]

class NestedBlockConstraintForParam(BaseModel):
    
    
    nbcfp: Optional["BlockConstraintForParam"]

class Node(BaseModel):
    
    
    data: Optional[int]
    next: Optional["Node"] = None

class OptionalTest_Prop1(BaseModel):
    
    
    omega_a: Optional[str]
    omega_b: Optional[int]

class OptionalTest_ReturnType(BaseModel):
    
    
    omega_1: Optional["OptionalTest_Prop1"] = None
    omega_2: Optional[str] = None
    omega_3: List[Optional[types.OptionalTest_CategoryType]]

class OrderInfo(BaseModel):
    
    
    order_status: Optional[types.OrderStatus]
    tracking_number: Optional[str] = None
    estimated_arrival_date: Optional[str] = None

class OriginalA(BaseModel):
    
    
    value: Optional[int]

class OriginalB(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    value: Optional[int]

class Person(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    name: Optional[str] = None
    hair_color: Optional[Union[types.Color, str]] = None

class PhoneNumber(BaseModel):
    
    
    value: Optional[str]

class Quantity(BaseModel):
    
    
    amount: Optional[Union[Optional[int], Optional[float]]]
    unit: Optional[str] = None

class RaysData(BaseModel):
    
    
    dataType: Optional[types.DataType]
    value: Optional[Union["Resume", "Event"]]

class ReceiptInfo(BaseModel):
    
    
    items: List["ReceiptItem"]
    total_cost: Optional[float] = None
    venue: Optional[Union[Literal["barisa"], Literal["ox_burger"]]]

class ReceiptItem(BaseModel):
    
    
    name: Optional[str]
    description: Optional[str] = None
    quantity: Optional[int]
    price: Optional[float]

class Recipe(BaseModel):
    
    
    ingredients: Dict[str, Optional["Quantity"]]
    recipe_type: Optional[Union[Literal["breakfast"], Literal["dinner"]]]

class Resume(BaseModel):
    
    
    name: Optional[str]
    email: Optional[str]
    phone: Optional[str]
    experience: List["Education"]
    education: List[Optional[str]]
    skills: List[Optional[str]]

class Schema(BaseModel):
    
    
    prop1: Optional[Union[Optional[str], Optional[None]]] = None
    prop2: Optional[Union["Nested", Optional[str]]]
    prop5: List[Optional[Union[Optional[str], Optional[None]]]]
    prop6: Optional[Union[Optional[str], List["Nested"]]]
    nested_attrs: List[Optional[Union[Optional[str], Optional[None], "Nested"]]]
    parens: Optional[Union[Optional[str], Optional[None]]] = None
    other_group: Optional[Union[Optional[str], Optional[Union[Optional[int], Optional[str]]]]]

class SearchParams(BaseModel):
    
    
    dateRange: Optional[int] = None
    location: List[Optional[str]]
    jobTitle: Optional["WithReasoning"] = None
    company: Optional["WithReasoning"] = None
    description: List["WithReasoning"]
    tags: List[Optional[Union[Optional[types.Tag], Optional[str]]]]

class SomeClassNestedDynamic(BaseModel):
    
    model_config = ConfigDict(extra='allow')
    
    hi: Optional[str]

class StringToClassEntry(BaseModel):
    
    
    word: Optional[str]

class TestClassAlias(BaseModel):
    
    
    key: Optional[str]
    key2: Optional[str]
    key3: Optional[str]
    key4: Optional[str]
    key5: Optional[str]

class TestClassNested(BaseModel):
    
    
    prop1: Optional[str]
    prop2: Optional["InnerClass"]

class TestClassWithEnum(BaseModel):
    
    
    prop1: Optional[str]
    prop2: Optional[types.EnumInClass]

class TestOutputClass(BaseModel):
    
    
    prop1: Optional[str]
    prop2: Optional[int]

class Tree(BaseModel):
    
    
    data: Optional[int]
    children: Optional["Forest"]

class TwoStoriesOneTitle(BaseModel):
    
    
    title: Optional[str]
    story_a: Optional[str]
    story_b: Optional[str]

class UnionTest_ReturnType(BaseModel):
    
    
    prop1: Optional[Union[Optional[str], Optional[bool]]]
    prop2: List[Optional[Union[Optional[float], Optional[bool]]]]
    prop3: Optional[Union[List[Optional[bool]], List[Optional[int]]]]

class WithReasoning(BaseModel):
    
    
    value: Optional[str]
    reasoning: Optional[str]
