/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, ClientRegistry, toBamlError } from "@boundaryml/baml"
import { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import * as types from "./types"
import {AliasedEnum, AnotherObject, BigNumbers, BinaryNode, Blah, BlockConstraint, BlockConstraintForParam, BookOrder, Category, Category2, Category3, ClassForNullLiteral, ClassOptionalOutput, ClassOptionalOutput2, ClassToRecAlias, ClassWithBlockDone, ClassWithImage, ClassWithoutDone, Color, ComplexMemoryObject, CompoundBigNumbers, ContactInfo, CustomTaskResult, DataType, DummyOutput, DynEnumOne, DynEnumTwo, DynInputOutput, DynamicClassOne, DynamicClassTwo, DynamicOutput, Earthling, Education, Email, EmailAddress, EnumInClass, EnumOutput, Event, FakeImage, FlightConfirmation, FooAny, Forest, FormatterTest0, FormatterTest1, FormatterTest2, FormatterTest3, GroceryReceipt, Hobby, InnerClass, InnerClass2, InputClass, InputClassNested, JsonArray, JsonEntry, JsonObject, JsonTemplate, JsonValue, LinkedList, LinkedListAliasNode, LiteralClassHello, LiteralClassOne, LiteralClassTwo, MalformedConstraints, MalformedConstraints2, MapKey, Martian, MemoryObject, MergeAttrs, NamedArgsSingleClass, NamedArgsSingleEnum, NamedArgsSingleEnumList, Nested, Nested2, NestedBlockConstraint, NestedBlockConstraintForParam, Node, NodeWithAliasIndirection, OptionalListAndMap, OptionalTest_CategoryType, OptionalTest_Prop1, OptionalTest_ReturnType, OrderInfo, OrderStatus, OriginalA, OriginalB, Person, PhoneNumber, Quantity, RaysData, RecAliasOne, RecAliasThree, RecAliasTwo, ReceiptInfo, ReceiptItem, Recipe, RecursiveAliasDependency, RecursiveListAlias, RecursiveMapAlias, Resume, Schema, SearchParams, SemanticContainer, SimpleTag, SmallThing, SomeClassNestedDynamic, StringToClassEntry, Tag, TestClassAlias, TestClassNested, TestClassWithEnum, TestEnum, TestMemoryOutput, TestOutputClass, Tree, TwoStoriesOneTitle, UnionTest_ReturnType, UniverseQuestion, UniverseQuestionInput, WithReasoning} from "./types"
import type TypeBuilder from "./type_builder"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

export class BamlSyncClient {

  constructor(private runtime: BamlRuntime, private ctx_manager: BamlCtxManager) {}

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  
  AaaSamOutputFormat(
      recipe: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Recipe {
    try {
    const raw = this.runtime.callFunctionSync(
      "AaaSamOutputFormat",
      {
        "recipe": recipe
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Recipe
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasThatPointsToRecursiveType(
      list: LinkedListAliasNode,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LinkedListAliasNode {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasThatPointsToRecursiveType",
      {
        "list": list
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as LinkedListAliasNode
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasWithMultipleAttrs(
      money: Checked<number,"gt_ten">,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Checked<number,"gt_ten"> {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasWithMultipleAttrs",
      {
        "money": money
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Checked<number,"gt_ten">
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasedInputClass(
      input: InputClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasedInputClass",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasedInputClass2(
      input: InputClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasedInputClass2",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasedInputClassNested(
      input: InputClassNested,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasedInputClassNested",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasedInputEnum(
      input: AliasedEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasedInputEnum",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AliasedInputList(
      input: AliasedEnum[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AliasedInputList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AllowedOptionals(
      optionals: OptionalListAndMap,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): OptionalListAndMap {
    try {
    const raw = this.runtime.callFunctionSync(
      "AllowedOptionals",
      {
        "optionals": optionals
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as OptionalListAndMap
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AssertFn(
      a: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "AssertFn",
      {
        "a": a
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  AudioInput(
      aud: Audio,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "AudioInput",
      {
        "aud": aud
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  BuildLinkedList(
      input: number[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LinkedList {
    try {
    const raw = this.runtime.callFunctionSync(
      "BuildLinkedList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as LinkedList
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  BuildTree(
      input: BinaryNode,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Tree {
    try {
    const raw = this.runtime.callFunctionSync(
      "BuildTree",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Tree
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClassThatPointsToRecursiveClassThroughAlias(
      cls: ClassToRecAlias,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ClassToRecAlias {
    try {
    const raw = this.runtime.callFunctionSync(
      "ClassThatPointsToRecursiveClassThroughAlias",
      {
        "cls": cls
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ClassToRecAlias
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClassifyDynEnumTwo(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (string | DynEnumTwo) {
    try {
    const raw = this.runtime.callFunctionSync(
      "ClassifyDynEnumTwo",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as (string | DynEnumTwo)
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Category {
    try {
    const raw = this.runtime.callFunctionSync(
      "ClassifyMessage",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Category
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Category {
    try {
    const raw = this.runtime.callFunctionSync(
      "ClassifyMessage2",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Category
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClassifyMessage3(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Category {
    try {
    const raw = this.runtime.callFunctionSync(
      "ClassifyMessage3",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Category
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  Completion(
      prefix: string,suffix: string,language: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "Completion",
      {
        "prefix": prefix,"suffix": suffix,"language": language
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  CustomTask(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BookOrder | FlightConfirmation | GroceryReceipt {
    try {
    const raw = this.runtime.callFunctionSync(
      "CustomTask",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as BookOrder | FlightConfirmation | GroceryReceipt
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DescribeImage(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "DescribeImage",
      {
        "img": img
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DescribeImage2(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "DescribeImage2",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DescribeImage3(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "DescribeImage3",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DescribeImage4(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "DescribeImage4",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DifferentiateUnions(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): OriginalA | OriginalB {
    try {
    const raw = this.runtime.callFunctionSync(
      "DifferentiateUnions",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as OriginalA | OriginalB
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DummyOutputFunction(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): DummyOutput {
    try {
    const raw = this.runtime.callFunctionSync(
      "DummyOutputFunction",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as DummyOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DynamicFunc(
      input: DynamicClassOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): DynamicClassTwo {
    try {
    const raw = this.runtime.callFunctionSync(
      "DynamicFunc",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as DynamicClassTwo
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DynamicInputOutput(
      input: DynInputOutput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): DynInputOutput {
    try {
    const raw = this.runtime.callFunctionSync(
      "DynamicInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as DynInputOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DynamicListInputOutput(
      input: DynInputOutput[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): DynInputOutput[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "DynamicListInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as DynInputOutput[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExpectFailure(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExpectFailure",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractContactInfo(
      document: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ContactInfo {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractContactInfo",
      {
        "document": document
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ContactInfo
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractHobby(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (string | Hobby)[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractHobby",
      {
        "text": text
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as (string | Hobby)[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractNames(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractNames",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractPeople(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Person[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractPeople",
      {
        "text": text
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Person[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractReceiptInfo(
      email: string,reason: "curiosity" | "personal_finance",
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ReceiptInfo {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractReceiptInfo",
      {
        "email": email,"reason": reason
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ReceiptInfo
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      resume: string,img?: Image | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Resume {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractResume",
      {
        "resume": resume,"img": img?? null
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Resume
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume2(
      resume: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Resume {
    try {
    const raw = this.runtime.callFunctionSync(
      "ExtractResume2",
      {
        "resume": resume
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Resume
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnClassOptionalOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ClassOptionalOutput | null {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnClassOptionalOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ClassOptionalOutput | null
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnClassOptionalOutput2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ClassOptionalOutput2 | null {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnClassOptionalOutput2",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ClassOptionalOutput2 | null
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnEnumListOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): EnumOutput[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnEnumListOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as EnumOutput[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): EnumOutput {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnEnumOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as EnumOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnLiteralClassInputOutput(
      input: LiteralClassHello,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LiteralClassHello {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnLiteralClassInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as LiteralClassHello
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnLiteralUnionClassInputOutput(
      input: LiteralClassOne | LiteralClassTwo,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LiteralClassOne | LiteralClassTwo {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnLiteralUnionClassInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as LiteralClassOne | LiteralClassTwo
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnNamedArgsSingleStringOptional(
      myString?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnNamedArgsSingleStringOptional",
      {
        "myString": myString?? null
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputBool",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as boolean
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputClass(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestOutputClass {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputClass",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestOutputClass
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputClassList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestOutputClass[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputClassList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestOutputClass[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputClassNested(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestClassNested {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputClassNested",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestClassNested
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputClassWithEnum(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestClassWithEnum {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputClassWithEnum",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestClassWithEnum
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputInt(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputInt",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputLiteralBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): false {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputLiteralBool",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as false
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputLiteralInt(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): 5 {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputLiteralInt",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as 5
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputLiteralString(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): "example output" {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputLiteralString",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as "example output"
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnOutputStringList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnOutputStringList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnTestAliasedEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestEnum {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnTestAliasedEnumOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestEnum
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnTestClassAlias(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestClassAlias {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnTestClassAlias",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestClassAlias
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FnTestNamedArgsSingleEnum(
      myArg: NamedArgsSingleEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "FnTestNamedArgsSingleEnum",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GetDataType(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RaysData {
    try {
    const raw = this.runtime.callFunctionSync(
      "GetDataType",
      {
        "text": text
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as RaysData
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GetOrderInfo(
      email: Email,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): OrderInfo {
    try {
    const raw = this.runtime.callFunctionSync(
      "GetOrderInfo",
      {
        "email": email
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as OrderInfo
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GetQuery(
      query: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): SearchParams {
    try {
    const raw = this.runtime.callFunctionSync(
      "GetQuery",
      {
        "query": query
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as SearchParams
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  InOutEnumMapKey(
      i1: Partial<Record<types.MapKey, string>>,i2: Partial<Record<types.MapKey, string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Partial<Record<types.MapKey, string>> {
    try {
    const raw = this.runtime.callFunctionSync(
      "InOutEnumMapKey",
      {
        "i1": i1,"i2": i2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Partial<Record<types.MapKey, string>>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  InOutLiteralStringUnionMapKey(
      i1: Partial<Record<"one" | "two" | "three" | "four", string>>,i2: Partial<Record<"one" | "two" | "three" | "four", string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Partial<Record<"one" | "two" | "three" | "four", string>> {
    try {
    const raw = this.runtime.callFunctionSync(
      "InOutLiteralStringUnionMapKey",
      {
        "i1": i1,"i2": i2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Partial<Record<"one" | "two" | "three" | "four", string>>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  InOutSingleLiteralStringMapKey(
      m: Partial<Record<"key", string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Partial<Record<"key", string>> {
    try {
    const raw = this.runtime.callFunctionSync(
      "InOutSingleLiteralStringMapKey",
      {
        "m": m
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Partial<Record<"key", string>>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  JsonTypeAliasCycle(
      input: JsonValue,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): JsonValue {
    try {
    const raw = this.runtime.callFunctionSync(
      "JsonTypeAliasCycle",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as JsonValue
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  LiteralUnionsTest(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): 1 | true | "string output" {
    try {
    const raw = this.runtime.callFunctionSync(
      "LiteralUnionsTest",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as 1 | true | "string output"
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MakeBlockConstraint(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Checked<BlockConstraint,"cross_field"> {
    try {
    const raw = this.runtime.callFunctionSync(
      "MakeBlockConstraint",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Checked<BlockConstraint,"cross_field">
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MakeNestedBlockConstraint(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): NestedBlockConstraint {
    try {
    const raw = this.runtime.callFunctionSync(
      "MakeNestedBlockConstraint",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as NestedBlockConstraint
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MakeSemanticContainer(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): SemanticContainer {
    try {
    const raw = this.runtime.callFunctionSync(
      "MakeSemanticContainer",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as SemanticContainer
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MapAlias(
      m: Record<string, string[]>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Record<string, string[]> {
    try {
    const raw = this.runtime.callFunctionSync(
      "MapAlias",
      {
        "m": m
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Record<string, string[]>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MergeAliasAttributes(
      money: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): MergeAttrs {
    try {
    const raw = this.runtime.callFunctionSync(
      "MergeAliasAttributes",
      {
        "money": money
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as MergeAttrs
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MyFunc(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): DynamicOutput {
    try {
    const raw = this.runtime.callFunctionSync(
      "MyFunc",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as DynamicOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  NestedAlias(
      c: number | string | boolean | number | string[] | Record<string, string[]>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number | string | boolean | number | string[] | Record<string, string[]> {
    try {
    const raw = this.runtime.callFunctionSync(
      "NestedAlias",
      {
        "c": c
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number | string | boolean | number | string[] | Record<string, string[]>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  NullLiteralClassHello(
      s: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ClassForNullLiteral {
    try {
    const raw = this.runtime.callFunctionSync(
      "NullLiteralClassHello",
      {
        "s": s
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as ClassForNullLiteral
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  OptionalTest_Function(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (OptionalTest_ReturnType | null)[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "OptionalTest_Function",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as (OptionalTest_ReturnType | null)[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PredictAge(
      name: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): FooAny {
    try {
    const raw = this.runtime.callFunctionSync(
      "PredictAge",
      {
        "name": name
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as FooAny
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PredictAgeBare(
      inp: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Checked<number,"too_big"> {
    try {
    const raw = this.runtime.callFunctionSync(
      "PredictAgeBare",
      {
        "inp": inp
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Checked<number,"too_big">
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PrimitiveAlias(
      p: number | string | boolean | number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number | string | boolean | number {
    try {
    const raw = this.runtime.callFunctionSync(
      "PrimitiveAlias",
      {
        "p": p
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number | string | boolean | number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestClaude(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestClaude",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestClaudeChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestClaudeChat",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestClaudeChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestClaudeChatNoSystem",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestOpenAI",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestOpenAIChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestOpenAIChat",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestOpenAIChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestOpenAIChatNoSystem",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PromptTestStreaming(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "PromptTestStreaming",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  RecursiveAliasCycle(
      input: RecAliasOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RecAliasOne {
    try {
    const raw = this.runtime.callFunctionSync(
      "RecursiveAliasCycle",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as RecAliasOne
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  RecursiveClassWithAliasIndirection(
      cls: NodeWithAliasIndirection,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): NodeWithAliasIndirection {
    try {
    const raw = this.runtime.callFunctionSync(
      "RecursiveClassWithAliasIndirection",
      {
        "cls": cls
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as NodeWithAliasIndirection
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ReturnAliasWithMergedAttributes(
      money: Checked<number,"gt_ten">,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Checked<number,"gt_ten"> {
    try {
    const raw = this.runtime.callFunctionSync(
      "ReturnAliasWithMergedAttributes",
      {
        "money": money
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Checked<number,"gt_ten">
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ReturnFailingAssert(
      inp: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "ReturnFailingAssert",
      {
        "inp": inp
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ReturnJsonEntry(
      s: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): JsonTemplate {
    try {
    const raw = this.runtime.callFunctionSync(
      "ReturnJsonEntry",
      {
        "s": s
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as JsonTemplate
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ReturnMalformedConstraints(
      a: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): MalformedConstraints {
    try {
    const raw = this.runtime.callFunctionSync(
      "ReturnMalformedConstraints",
      {
        "a": a
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as MalformedConstraints
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SchemaDescriptions(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Schema {
    try {
    const raw = this.runtime.callFunctionSync(
      "SchemaDescriptions",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Schema
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SimpleRecursiveListAlias(
      input: RecursiveListAlias,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RecursiveListAlias {
    try {
    const raw = this.runtime.callFunctionSync(
      "SimpleRecursiveListAlias",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as RecursiveListAlias
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SimpleRecursiveMapAlias(
      input: RecursiveMapAlias,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RecursiveMapAlias {
    try {
    const raw = this.runtime.callFunctionSync(
      "SimpleRecursiveMapAlias",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as RecursiveMapAlias
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StreamBigNumbers(
      digits: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BigNumbers {
    try {
    const raw = this.runtime.callFunctionSync(
      "StreamBigNumbers",
      {
        "digits": digits
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as BigNumbers
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StreamFailingAssertion(
      theme: string,length: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TwoStoriesOneTitle {
    try {
    const raw = this.runtime.callFunctionSync(
      "StreamFailingAssertion",
      {
        "theme": theme,"length": length
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TwoStoriesOneTitle
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StreamOneBigNumber(
      digits: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "StreamOneBigNumber",
      {
        "digits": digits
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StreamUnionIntegers(
      digits: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (number | string)[] {
    try {
    const raw = this.runtime.callFunctionSync(
      "StreamUnionIntegers",
      {
        "digits": digits
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as (number | string)[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StreamingCompoundNumbers(
      digits: number,yapping: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): CompoundBigNumbers {
    try {
    const raw = this.runtime.callFunctionSync(
      "StreamingCompoundNumbers",
      {
        "digits": digits,"yapping": yapping
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as CompoundBigNumbers
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TakeRecAliasDep(
      input: RecursiveAliasDependency,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RecursiveAliasDependency {
    try {
    const raw = this.runtime.callFunctionSync(
      "TakeRecAliasDep",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as RecursiveAliasDependency
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAnthropic(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAnthropic",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAnthropicShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAnthropicShorthand",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAws(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAws",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAwsInvalidAccessKey(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAwsInvalidAccessKey",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAwsInvalidProfile(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAwsInvalidProfile",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAwsInvalidRegion(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAwsInvalidRegion",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAwsInvalidSessionToken(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAwsInvalidSessionToken",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzure",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureFailure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureFailure",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureO1NoMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureO1NoMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureO1WithMaxCompletionTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureO1WithMaxCompletionTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureO1WithMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureO1WithMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureO3NoMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureO3NoMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureO3WithMaxCompletionTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureO3WithMaxCompletionTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestAzureWithMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestAzureWithMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestCaching(
      input: string,not_cached: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestCaching",
      {
        "input": input,"not_cached": not_cached
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFallbackClient",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFallbackToShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFallbackToShorthand",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleBool(
      myBool: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleBool",
      {
        "myBool": myBool
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleClass(
      myArg: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleClass",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleEnumList(
      myArg: NamedArgsSingleEnumList[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleEnumList",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleFloat(
      myFloat: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleFloat",
      {
        "myFloat": myFloat
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleInt(
      myInt: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleInt",
      {
        "myInt": myInt
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleMapStringToClass(
      myMap: Record<string, StringToClassEntry>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Record<string, StringToClassEntry> {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleMapStringToClass",
      {
        "myMap": myMap
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Record<string, StringToClassEntry>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleMapStringToMap(
      myMap: Record<string, Record<string, string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Record<string, Record<string, string>> {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleMapStringToMap",
      {
        "myMap": myMap
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Record<string, Record<string, string>>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleMapStringToString(
      myMap: Record<string, string>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Record<string, string> {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleMapStringToString",
      {
        "myMap": myMap
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as Record<string, string>
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleString(
      myString: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleString",
      {
        "myString": myString
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleStringArray(
      myStringArray: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleStringArray",
      {
        "myStringArray": myStringArray
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestFnNamedArgsSingleStringList(
      myArg: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestFnNamedArgsSingleStringList",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGemini(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestGemini",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGeminiOpenAiGeneric(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestGeminiOpenAiGeneric",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGeminiSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestGeminiSystem",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGeminiSystemAsChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestGeminiSystemAsChat",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestImageInput(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestImageInput",
      {
        "img": img
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestImageInputAnthropic(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestImageInputAnthropic",
      {
        "img": img
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestImageListInput(
      imgs: Image[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestImageListInput",
      {
        "imgs": imgs
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestMemory(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): TestMemoryOutput {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestMemory",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as TestMemoryOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestMulticlassNamedArgs(
      myArg: NamedArgsSingleClass,myArg2: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestMulticlassNamedArgs",
      {
        "myArg": myArg,"myArg2": myArg2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestNamedArgsLiteralBool(
      myBool: true,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestNamedArgsLiteralBool",
      {
        "myBool": myBool
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestNamedArgsLiteralInt(
      myInt: 1,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestNamedArgsLiteralInt",
      {
        "myInt": myInt
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestNamedArgsLiteralString(
      myString: "My String",
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestNamedArgsLiteralString",
      {
        "myString": myString
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOllama(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOllama",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAI",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAILegacyProvider(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAILegacyProvider",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIO1NoMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIO1NoMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIO1WithMaxCompletionTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIO1WithMaxCompletionTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIO1WithMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIO1WithMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIShorthand",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIWithMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIWithMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestOpenAIWithNullMaxTokens(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestOpenAIWithNullMaxTokens",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestRetryConstant(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestRetryConstant",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestRetryExponential(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestRetryExponential",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestSingleFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestSingleFallbackClient",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestUniverseQuestion(
      question: UniverseQuestionInput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): UniverseQuestion {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestUniverseQuestion",
      {
        "question": question
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as UniverseQuestion
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestVertex(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestVertex",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestVertexWithSystemInstructions(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
    const raw = this.runtime.callFunctionSync(
      "TestVertexWithSystemInstructions",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  UnionTest_Function(
      input: string | boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): UnionTest_ReturnType {
    try {
    const raw = this.runtime.callFunctionSync(
      "UnionTest_Function",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as UnionTest_ReturnType
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  UseBlockConstraint(
      inp: BlockConstraintForParam,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "UseBlockConstraint",
      {
        "inp": inp
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  UseMalformedConstraints(
      a: MalformedConstraints2,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "UseMalformedConstraints",
      {
        "a": a
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  UseNestedBlockConstraint(
      inp: NestedBlockConstraintForParam,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): number {
    try {
    const raw = this.runtime.callFunctionSync(
      "UseNestedBlockConstraint",
      {
        "inp": inp
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
    )
    return raw.parsed(false) as number
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)