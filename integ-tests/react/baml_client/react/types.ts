/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlStream } from '@boundaryml/baml';

export const STREAMABLE_VALUE_TYPE = Symbol.for('ui.streamable.value');

export type StreamablePatch = undefined | [0, string]; // Append string.

declare const __internal_curr: unique symbol;
declare const __internal_error: unique symbol;

/**
 * Type definition for the return value of createStreamableValue.
 * Contains methods to control the stream and access the current value.
 */
export type StreamableController<T> = {
  done: (finalValue?: T) => void;
  error: (error: Error) => void;
  value: BaseStreamableValue<T>;
  update: (value: T) => void;
};

/**
 * StreamableValue is a value that can be streamed over the network via AI Actions.
 * To read the streamed values, use the `readStreamableValue` or `useStreamableValue` APIs.
 */
export type BaseStreamableValue<T = any, E = any> = {
  /**
   * @internal Use `readStreamableValue` to read the values.
   */
  type?: typeof STREAMABLE_VALUE_TYPE;
  /**
   * @internal Use `readStreamableValue` to read the values.
   */
  curr?: T;
  /**
   * @internal Use `readStreamableValue` to read the values.
   */
  error?: E;
  /**
   * @internal Use `readStreamableValue` to read the values.
   */
  diff?: StreamablePatch;
  /**
   * @internal Use `readStreamableValue` to read the values.
   */
  next?: Promise<BaseStreamableValue<T, E>>;

  // branded types to maintain type signature after internal properties are stripped.
  [__internal_curr]?: T;
  [__internal_error]?: E;
};

/**
 * Type for representing a value that can be either partial or final
 */
export type PartialFinalValue<TPartial, TFinal> =
  | { partial: TPartial }
  | { final: TFinal };

/**
 * Type alias for defining a StreamableValue based on a BamlStream.
 * It captures either a partial or final result depending on the stream state.
 */
export type StreamableValue<T extends BamlStream<any, any>> = PartialFinalValue<
  T extends BamlStream<infer StreamRet, any> ? StreamRet : never,
  T extends BamlStream<any, infer Ret> ? Ret : never
>;

/**
 * Type definition for a streaming server action.
 * @template TPartial The type of partial/intermediate response data
 * @template TFinal The type of the final response data
 */
export type StreamedObject<TPartial, TFinal> = {
  object: BaseStreamableValue<PartialFinalValue<TPartial, TFinal>>;
};

/**
 * Type definition for a streaming server action.
 * @template TPartial The type of partial/intermediate response data
 * @template TFinal The type of the final response data
 * @template TParams Tuple type of function parameters
 */
export type StreamingServerAction<
  TPartial,
  TFinal,
  TParams extends unknown[],
> = (...args: [...TParams, { stream: true }]) => Promise<StreamedObject<TPartial, TFinal>>;

/**
 * Type definition for a function that produces a BamlStream.
 * @template TPartial The type of partial/intermediate response data
 * @template TFinal The type of the final response data
 * @template TArgs Tuple type of function parameters
 */
export type StreamFunction<TPartial, TFinal, TArgs extends unknown[]> = (
  ...args: TArgs
) => BamlStream<TPartial, TFinal>;

/**
 * Type definition for the result of processing a BamlStream.
 * @template TPartial The type of partial/intermediate response data
 * @template TFinal The type of the final response data
 */
export type StreamHelperResult<TPartial, TFinal> = StreamedObject<TPartial, TFinal>;

/**
 * Type definition for a non-streaming server action.
 * @template TFinal The type of the final response data
 * @template TParams Tuple type of function parameters
 */
export type NonStreamingServerAction<
  TFinal,
  TParams extends unknown[],
> = (...args: [...TParams, { stream?: false | undefined }]) => Promise<TFinal>;