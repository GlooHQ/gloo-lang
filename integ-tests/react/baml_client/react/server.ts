/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  AliasedEnum,  AnotherObject,  BigNumbers,  BinaryNode,  Blah,  BlockConstraint,  BlockConstraintForParam,  BookOrder,  Category,  Category2,  Category3,  ClassForNullLiteral,  ClassOptionalOutput,  ClassOptionalOutput2,  ClassToRecAlias,  ClassWithBlockDone,  ClassWithImage,  ClassWithoutDone,  Color,  ComplexMemoryObject,  CompoundBigNumbers,  ContactInfo,  CustomTaskResult,  DataType,  DummyOutput,  DynEnumOne,  DynEnumTwo,  DynInputOutput,  DynamicClassOne,  DynamicClassTwo,  DynamicOutput,  Earthling,  Education,  Email,  EmailAddress,  EnumInClass,  EnumOutput,  Event,  FakeImage,  FlightConfirmation,  FooAny,  Forest,  FormatterTest0,  FormatterTest1,  FormatterTest2,  FormatterTest3,  GroceryReceipt,  Hobby,  InnerClass,  InnerClass2,  InputClass,  InputClassNested,  JsonArray,  JsonEntry,  JsonObject,  JsonTemplate,  JsonValue,  LinkedList,  LinkedListAliasNode,  LiteralClassHello,  LiteralClassOne,  LiteralClassTwo,  MalformedConstraints,  MalformedConstraints2,  MapKey,  Martian,  MemoryObject,  MergeAttrs,  NamedArgsSingleClass,  NamedArgsSingleEnum,  NamedArgsSingleEnumList,  Nested,  Nested2,  NestedBlockConstraint,  NestedBlockConstraintForParam,  Node,  NodeWithAliasIndirection,  OptionalListAndMap,  OptionalTest_CategoryType,  OptionalTest_Prop1,  OptionalTest_ReturnType,  OrderInfo,  OrderStatus,  OriginalA,  OriginalB,  Person,  PhoneNumber,  Quantity,  RaysData,  RecAliasOne,  RecAliasThree,  RecAliasTwo,  ReceiptInfo,  ReceiptItem,  Recipe,  RecursiveAliasDependency,  RecursiveListAlias,  RecursiveMapAlias,  Resume,  Schema,  SearchParams,  SemanticContainer,  SimpleTag,  SmallThing,  SomeClassNestedDynamic,  StringToClassEntry,  Tag,  TestClassAlias,  TestClassNested,  TestClassWithEnum,  TestEnum,  TestMemoryOutput,  TestOutputClass,  Tree,  TwoStoriesOneTitle,  UnionTest_ReturnType,  UniverseQuestion,  UniverseQuestionInput,  WithReasoning } from "../types"

import type * as types from "../types"

/**
 * Regular BAML server actions that return direct responses.
 */

/**
 * Executes the "AaaSamOutputFormat" BAML action.
 *
 * This server action calls the underlying BAML function "AaaSamOutputFormat"
 * with the specified parameters.
 *
 * @param { string } recipe - Input parameter.
 *
 * @returns {Promise<Recipe>} A promise that resolves with the result of the action.
 */
export const AaaSamOutputFormat = async (
  recipe: string,
): Promise<Recipe> => {
  return b.AaaSamOutputFormat(
    recipe,
  );
};

/**
 * Executes the "AliasThatPointsToRecursiveType" BAML action.
 *
 * This server action calls the underlying BAML function "AliasThatPointsToRecursiveType"
 * with the specified parameters.
 *
 * @param { LinkedListAliasNode } list - Input parameter.
 *
 * @returns {Promise<LinkedListAliasNode>} A promise that resolves with the result of the action.
 */
export const AliasThatPointsToRecursiveType = async (
  list: LinkedListAliasNode,
): Promise<LinkedListAliasNode> => {
  return b.AliasThatPointsToRecursiveType(
    list,
  );
};

/**
 * Executes the "AliasWithMultipleAttrs" BAML action.
 *
 * This server action calls the underlying BAML function "AliasWithMultipleAttrs"
 * with the specified parameters.
 *
 * @param { Checked<number,"gt_ten"> } money - Input parameter.
 *
 * @returns {Promise<Checked<number,"gt_ten">>} A promise that resolves with the result of the action.
 */
export const AliasWithMultipleAttrs = async (
  money: Checked<number,"gt_ten">,
): Promise<Checked<number,"gt_ten">> => {
  return b.AliasWithMultipleAttrs(
    money,
  );
};

/**
 * Executes the "AliasedInputClass" BAML action.
 *
 * This server action calls the underlying BAML function "AliasedInputClass"
 * with the specified parameters.
 *
 * @param { InputClass } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AliasedInputClass = async (
  input: InputClass,
): Promise<string> => {
  return b.AliasedInputClass(
    input,
  );
};

/**
 * Executes the "AliasedInputClass2" BAML action.
 *
 * This server action calls the underlying BAML function "AliasedInputClass2"
 * with the specified parameters.
 *
 * @param { InputClass } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AliasedInputClass2 = async (
  input: InputClass,
): Promise<string> => {
  return b.AliasedInputClass2(
    input,
  );
};

/**
 * Executes the "AliasedInputClassNested" BAML action.
 *
 * This server action calls the underlying BAML function "AliasedInputClassNested"
 * with the specified parameters.
 *
 * @param { InputClassNested } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AliasedInputClassNested = async (
  input: InputClassNested,
): Promise<string> => {
  return b.AliasedInputClassNested(
    input,
  );
};

/**
 * Executes the "AliasedInputEnum" BAML action.
 *
 * This server action calls the underlying BAML function "AliasedInputEnum"
 * with the specified parameters.
 *
 * @param { AliasedEnum } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AliasedInputEnum = async (
  input: AliasedEnum,
): Promise<string> => {
  return b.AliasedInputEnum(
    input,
  );
};

/**
 * Executes the "AliasedInputList" BAML action.
 *
 * This server action calls the underlying BAML function "AliasedInputList"
 * with the specified parameters.
 *
 * @param { AliasedEnum[] } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AliasedInputList = async (
  input: AliasedEnum[],
): Promise<string> => {
  return b.AliasedInputList(
    input,
  );
};

/**
 * Executes the "AllowedOptionals" BAML action.
 *
 * This server action calls the underlying BAML function "AllowedOptionals"
 * with the specified parameters.
 *
 * @param { OptionalListAndMap } optionals - Input parameter.
 *
 * @returns {Promise<OptionalListAndMap>} A promise that resolves with the result of the action.
 */
export const AllowedOptionals = async (
  optionals: OptionalListAndMap,
): Promise<OptionalListAndMap> => {
  return b.AllowedOptionals(
    optionals,
  );
};

/**
 * Executes the "AssertFn" BAML action.
 *
 * This server action calls the underlying BAML function "AssertFn"
 * with the specified parameters.
 *
 * @param { number } a - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const AssertFn = async (
  a: number,
): Promise<number> => {
  return b.AssertFn(
    a,
  );
};

/**
 * Executes the "AudioInput" BAML action.
 *
 * This server action calls the underlying BAML function "AudioInput"
 * with the specified parameters.
 *
 * @param { Audio } aud - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const AudioInput = async (
  aud: Audio,
): Promise<string> => {
  return b.AudioInput(
    aud,
  );
};

/**
 * Executes the "BuildLinkedList" BAML action.
 *
 * This server action calls the underlying BAML function "BuildLinkedList"
 * with the specified parameters.
 *
 * @param { number[] } input - Input parameter.
 *
 * @returns {Promise<LinkedList>} A promise that resolves with the result of the action.
 */
export const BuildLinkedList = async (
  input: number[],
): Promise<LinkedList> => {
  return b.BuildLinkedList(
    input,
  );
};

/**
 * Executes the "BuildTree" BAML action.
 *
 * This server action calls the underlying BAML function "BuildTree"
 * with the specified parameters.
 *
 * @param { BinaryNode } input - Input parameter.
 *
 * @returns {Promise<Tree>} A promise that resolves with the result of the action.
 */
export const BuildTree = async (
  input: BinaryNode,
): Promise<Tree> => {
  return b.BuildTree(
    input,
  );
};

/**
 * Executes the "ClassThatPointsToRecursiveClassThroughAlias" BAML action.
 *
 * This server action calls the underlying BAML function "ClassThatPointsToRecursiveClassThroughAlias"
 * with the specified parameters.
 *
 * @param { ClassToRecAlias } cls - Input parameter.
 *
 * @returns {Promise<ClassToRecAlias>} A promise that resolves with the result of the action.
 */
export const ClassThatPointsToRecursiveClassThroughAlias = async (
  cls: ClassToRecAlias,
): Promise<ClassToRecAlias> => {
  return b.ClassThatPointsToRecursiveClassThroughAlias(
    cls,
  );
};

/**
 * Executes the "ClassifyDynEnumTwo" BAML action.
 *
 * This server action calls the underlying BAML function "ClassifyDynEnumTwo"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<(string | DynEnumTwo)>} A promise that resolves with the result of the action.
 */
export const ClassifyDynEnumTwo = async (
  input: string,
): Promise<(string | DynEnumTwo)> => {
  return b.ClassifyDynEnumTwo(
    input,
  );
};

/**
 * Executes the "ClassifyMessage" BAML action.
 *
 * This server action calls the underlying BAML function "ClassifyMessage"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<Category>} A promise that resolves with the result of the action.
 */
export const ClassifyMessage = async (
  input: string,
): Promise<Category> => {
  return b.ClassifyMessage(
    input,
  );
};

/**
 * Executes the "ClassifyMessage2" BAML action.
 *
 * This server action calls the underlying BAML function "ClassifyMessage2"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<Category>} A promise that resolves with the result of the action.
 */
export const ClassifyMessage2 = async (
  input: string,
): Promise<Category> => {
  return b.ClassifyMessage2(
    input,
  );
};

/**
 * Executes the "ClassifyMessage3" BAML action.
 *
 * This server action calls the underlying BAML function "ClassifyMessage3"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<Category>} A promise that resolves with the result of the action.
 */
export const ClassifyMessage3 = async (
  input: string,
): Promise<Category> => {
  return b.ClassifyMessage3(
    input,
  );
};

/**
 * Executes the "Completion" BAML action.
 *
 * This server action calls the underlying BAML function "Completion"
 * with the specified parameters.
 *
 * @param { string } prefix - Input parameter.
 * @param { string } suffix - Input parameter.
 * @param { string } language - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const Completion = async (
  prefix: string,
  suffix: string,
  language: string,
): Promise<string> => {
  return b.Completion(
    prefix,
    suffix,
    language,
  );
};

/**
 * Executes the "CustomTask" BAML action.
 *
 * This server action calls the underlying BAML function "CustomTask"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<BookOrder | FlightConfirmation | GroceryReceipt>} A promise that resolves with the result of the action.
 */
export const CustomTask = async (
  input: string,
): Promise<BookOrder | FlightConfirmation | GroceryReceipt> => {
  return b.CustomTask(
    input,
  );
};

/**
 * Executes the "DescribeImage" BAML action.
 *
 * This server action calls the underlying BAML function "DescribeImage"
 * with the specified parameters.
 *
 * @param { Image } img - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const DescribeImage = async (
  img: Image,
): Promise<string> => {
  return b.DescribeImage(
    img,
  );
};

/**
 * Executes the "DescribeImage2" BAML action.
 *
 * This server action calls the underlying BAML function "DescribeImage2"
 * with the specified parameters.
 *
 * @param { ClassWithImage } classWithImage - Input parameter.
 * @param { Image } img2 - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const DescribeImage2 = async (
  classWithImage: ClassWithImage,
  img2: Image,
): Promise<string> => {
  return b.DescribeImage2(
    classWithImage,
    img2,
  );
};

/**
 * Executes the "DescribeImage3" BAML action.
 *
 * This server action calls the underlying BAML function "DescribeImage3"
 * with the specified parameters.
 *
 * @param { ClassWithImage } classWithImage - Input parameter.
 * @param { Image } img2 - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const DescribeImage3 = async (
  classWithImage: ClassWithImage,
  img2: Image,
): Promise<string> => {
  return b.DescribeImage3(
    classWithImage,
    img2,
  );
};

/**
 * Executes the "DescribeImage4" BAML action.
 *
 * This server action calls the underlying BAML function "DescribeImage4"
 * with the specified parameters.
 *
 * @param { ClassWithImage } classWithImage - Input parameter.
 * @param { Image } img2 - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const DescribeImage4 = async (
  classWithImage: ClassWithImage,
  img2: Image,
): Promise<string> => {
  return b.DescribeImage4(
    classWithImage,
    img2,
  );
};

/**
 * Executes the "DifferentiateUnions" BAML action.
 *
 * This server action calls the underlying BAML function "DifferentiateUnions"
 * with the specified parameters.
 *
 *
 * @returns {Promise<OriginalA | OriginalB>} A promise that resolves with the result of the action.
 */
export const DifferentiateUnions = async (
): Promise<OriginalA | OriginalB> => {
  return b.DifferentiateUnions(
  );
};

/**
 * Executes the "DummyOutputFunction" BAML action.
 *
 * This server action calls the underlying BAML function "DummyOutputFunction"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<DummyOutput>} A promise that resolves with the result of the action.
 */
export const DummyOutputFunction = async (
  input: string,
): Promise<DummyOutput> => {
  return b.DummyOutputFunction(
    input,
  );
};

/**
 * Executes the "DynamicFunc" BAML action.
 *
 * This server action calls the underlying BAML function "DynamicFunc"
 * with the specified parameters.
 *
 * @param { DynamicClassOne } input - Input parameter.
 *
 * @returns {Promise<DynamicClassTwo>} A promise that resolves with the result of the action.
 */
export const DynamicFunc = async (
  input: DynamicClassOne,
): Promise<DynamicClassTwo> => {
  return b.DynamicFunc(
    input,
  );
};

/**
 * Executes the "DynamicInputOutput" BAML action.
 *
 * This server action calls the underlying BAML function "DynamicInputOutput"
 * with the specified parameters.
 *
 * @param { DynInputOutput } input - Input parameter.
 *
 * @returns {Promise<DynInputOutput>} A promise that resolves with the result of the action.
 */
export const DynamicInputOutput = async (
  input: DynInputOutput,
): Promise<DynInputOutput> => {
  return b.DynamicInputOutput(
    input,
  );
};

/**
 * Executes the "DynamicListInputOutput" BAML action.
 *
 * This server action calls the underlying BAML function "DynamicListInputOutput"
 * with the specified parameters.
 *
 * @param { DynInputOutput[] } input - Input parameter.
 *
 * @returns {Promise<DynInputOutput[]>} A promise that resolves with the result of the action.
 */
export const DynamicListInputOutput = async (
  input: DynInputOutput[],
): Promise<DynInputOutput[]> => {
  return b.DynamicListInputOutput(
    input,
  );
};

/**
 * Executes the "ExpectFailure" BAML action.
 *
 * This server action calls the underlying BAML function "ExpectFailure"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const ExpectFailure = async (
): Promise<string> => {
  return b.ExpectFailure(
  );
};

/**
 * Executes the "ExtractContactInfo" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractContactInfo"
 * with the specified parameters.
 *
 * @param { string } document - Input parameter.
 *
 * @returns {Promise<ContactInfo>} A promise that resolves with the result of the action.
 */
export const ExtractContactInfo = async (
  document: string,
): Promise<ContactInfo> => {
  return b.ExtractContactInfo(
    document,
  );
};

/**
 * Executes the "ExtractHobby" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractHobby"
 * with the specified parameters.
 *
 * @param { string } text - Input parameter.
 *
 * @returns {Promise<(string | Hobby)[]>} A promise that resolves with the result of the action.
 */
export const ExtractHobby = async (
  text: string,
): Promise<(string | Hobby)[]> => {
  return b.ExtractHobby(
    text,
  );
};

/**
 * Executes the "ExtractNames" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractNames"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string[]>} A promise that resolves with the result of the action.
 */
export const ExtractNames = async (
  input: string,
): Promise<string[]> => {
  return b.ExtractNames(
    input,
  );
};

/**
 * Executes the "ExtractPeople" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractPeople"
 * with the specified parameters.
 *
 * @param { string } text - Input parameter.
 *
 * @returns {Promise<Person[]>} A promise that resolves with the result of the action.
 */
export const ExtractPeople = async (
  text: string,
): Promise<Person[]> => {
  return b.ExtractPeople(
    text,
  );
};

/**
 * Executes the "ExtractReceiptInfo" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractReceiptInfo"
 * with the specified parameters.
 *
 * @param { string } email - Input parameter.
 * @param { "curiosity" | "personal_finance" } reason - Input parameter.
 *
 * @returns {Promise<ReceiptInfo>} A promise that resolves with the result of the action.
 */
export const ExtractReceiptInfo = async (
  email: string,
  reason: "curiosity" | "personal_finance",
): Promise<ReceiptInfo> => {
  return b.ExtractReceiptInfo(
    email,
    reason,
  );
};

/**
 * Executes the "ExtractResume" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractResume"
 * with the specified parameters.
 *
 * @param { string } resume - Input parameter.
 * @param { Image | null } img (optional) - Input parameter.
 *
 * @returns {Promise<Resume>} A promise that resolves with the result of the action.
 */
export const ExtractResume = async (
  resume: string,
  img?: Image | null,
): Promise<Resume> => {
  return b.ExtractResume(
    resume,
    img,
  );
};

/**
 * Executes the "ExtractResume2" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractResume2"
 * with the specified parameters.
 *
 * @param { string } resume - Input parameter.
 *
 * @returns {Promise<Resume>} A promise that resolves with the result of the action.
 */
export const ExtractResume2 = async (
  resume: string,
): Promise<Resume> => {
  return b.ExtractResume2(
    resume,
  );
};

/**
 * Executes the "FnClassOptionalOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnClassOptionalOutput"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<ClassOptionalOutput | null>} A promise that resolves with the result of the action.
 */
export const FnClassOptionalOutput = async (
  input: string,
): Promise<ClassOptionalOutput | null> => {
  return b.FnClassOptionalOutput(
    input,
  );
};

/**
 * Executes the "FnClassOptionalOutput2" BAML action.
 *
 * This server action calls the underlying BAML function "FnClassOptionalOutput2"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<ClassOptionalOutput2 | null>} A promise that resolves with the result of the action.
 */
export const FnClassOptionalOutput2 = async (
  input: string,
): Promise<ClassOptionalOutput2 | null> => {
  return b.FnClassOptionalOutput2(
    input,
  );
};

/**
 * Executes the "FnEnumListOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnEnumListOutput"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<EnumOutput[]>} A promise that resolves with the result of the action.
 */
export const FnEnumListOutput = async (
  input: string,
): Promise<EnumOutput[]> => {
  return b.FnEnumListOutput(
    input,
  );
};

/**
 * Executes the "FnEnumOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnEnumOutput"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<EnumOutput>} A promise that resolves with the result of the action.
 */
export const FnEnumOutput = async (
  input: string,
): Promise<EnumOutput> => {
  return b.FnEnumOutput(
    input,
  );
};

/**
 * Executes the "FnLiteralClassInputOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnLiteralClassInputOutput"
 * with the specified parameters.
 *
 * @param { LiteralClassHello } input - Input parameter.
 *
 * @returns {Promise<LiteralClassHello>} A promise that resolves with the result of the action.
 */
export const FnLiteralClassInputOutput = async (
  input: LiteralClassHello,
): Promise<LiteralClassHello> => {
  return b.FnLiteralClassInputOutput(
    input,
  );
};

/**
 * Executes the "FnLiteralUnionClassInputOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnLiteralUnionClassInputOutput"
 * with the specified parameters.
 *
 * @param { LiteralClassOne | LiteralClassTwo } input - Input parameter.
 *
 * @returns {Promise<LiteralClassOne | LiteralClassTwo>} A promise that resolves with the result of the action.
 */
export const FnLiteralUnionClassInputOutput = async (
  input: LiteralClassOne | LiteralClassTwo,
): Promise<LiteralClassOne | LiteralClassTwo> => {
  return b.FnLiteralUnionClassInputOutput(
    input,
  );
};

/**
 * Executes the "FnNamedArgsSingleStringOptional" BAML action.
 *
 * This server action calls the underlying BAML function "FnNamedArgsSingleStringOptional"
 * with the specified parameters.
 *
 * @param { string | null } myString (optional) - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const FnNamedArgsSingleStringOptional = async (
  myString?: string | null,
): Promise<string> => {
  return b.FnNamedArgsSingleStringOptional(
    myString,
  );
};

/**
 * Executes the "FnOutputBool" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputBool"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<boolean>} A promise that resolves with the result of the action.
 */
export const FnOutputBool = async (
  input: string,
): Promise<boolean> => {
  return b.FnOutputBool(
    input,
  );
};

/**
 * Executes the "FnOutputClass" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputClass"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestOutputClass>} A promise that resolves with the result of the action.
 */
export const FnOutputClass = async (
  input: string,
): Promise<TestOutputClass> => {
  return b.FnOutputClass(
    input,
  );
};

/**
 * Executes the "FnOutputClassList" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputClassList"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestOutputClass[]>} A promise that resolves with the result of the action.
 */
export const FnOutputClassList = async (
  input: string,
): Promise<TestOutputClass[]> => {
  return b.FnOutputClassList(
    input,
  );
};

/**
 * Executes the "FnOutputClassNested" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputClassNested"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestClassNested>} A promise that resolves with the result of the action.
 */
export const FnOutputClassNested = async (
  input: string,
): Promise<TestClassNested> => {
  return b.FnOutputClassNested(
    input,
  );
};

/**
 * Executes the "FnOutputClassWithEnum" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputClassWithEnum"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestClassWithEnum>} A promise that resolves with the result of the action.
 */
export const FnOutputClassWithEnum = async (
  input: string,
): Promise<TestClassWithEnum> => {
  return b.FnOutputClassWithEnum(
    input,
  );
};

/**
 * Executes the "FnOutputInt" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputInt"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const FnOutputInt = async (
  input: string,
): Promise<number> => {
  return b.FnOutputInt(
    input,
  );
};

/**
 * Executes the "FnOutputLiteralBool" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputLiteralBool"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<false>} A promise that resolves with the result of the action.
 */
export const FnOutputLiteralBool = async (
  input: string,
): Promise<false> => {
  return b.FnOutputLiteralBool(
    input,
  );
};

/**
 * Executes the "FnOutputLiteralInt" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputLiteralInt"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<5>} A promise that resolves with the result of the action.
 */
export const FnOutputLiteralInt = async (
  input: string,
): Promise<5> => {
  return b.FnOutputLiteralInt(
    input,
  );
};

/**
 * Executes the "FnOutputLiteralString" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputLiteralString"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<"example output">} A promise that resolves with the result of the action.
 */
export const FnOutputLiteralString = async (
  input: string,
): Promise<"example output"> => {
  return b.FnOutputLiteralString(
    input,
  );
};

/**
 * Executes the "FnOutputStringList" BAML action.
 *
 * This server action calls the underlying BAML function "FnOutputStringList"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string[]>} A promise that resolves with the result of the action.
 */
export const FnOutputStringList = async (
  input: string,
): Promise<string[]> => {
  return b.FnOutputStringList(
    input,
  );
};

/**
 * Executes the "FnTestAliasedEnumOutput" BAML action.
 *
 * This server action calls the underlying BAML function "FnTestAliasedEnumOutput"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestEnum>} A promise that resolves with the result of the action.
 */
export const FnTestAliasedEnumOutput = async (
  input: string,
): Promise<TestEnum> => {
  return b.FnTestAliasedEnumOutput(
    input,
  );
};

/**
 * Executes the "FnTestClassAlias" BAML action.
 *
 * This server action calls the underlying BAML function "FnTestClassAlias"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestClassAlias>} A promise that resolves with the result of the action.
 */
export const FnTestClassAlias = async (
  input: string,
): Promise<TestClassAlias> => {
  return b.FnTestClassAlias(
    input,
  );
};

/**
 * Executes the "FnTestNamedArgsSingleEnum" BAML action.
 *
 * This server action calls the underlying BAML function "FnTestNamedArgsSingleEnum"
 * with the specified parameters.
 *
 * @param { NamedArgsSingleEnum } myArg - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const FnTestNamedArgsSingleEnum = async (
  myArg: NamedArgsSingleEnum,
): Promise<string> => {
  return b.FnTestNamedArgsSingleEnum(
    myArg,
  );
};

/**
 * Executes the "GetDataType" BAML action.
 *
 * This server action calls the underlying BAML function "GetDataType"
 * with the specified parameters.
 *
 * @param { string } text - Input parameter.
 *
 * @returns {Promise<RaysData>} A promise that resolves with the result of the action.
 */
export const GetDataType = async (
  text: string,
): Promise<RaysData> => {
  return b.GetDataType(
    text,
  );
};

/**
 * Executes the "GetOrderInfo" BAML action.
 *
 * This server action calls the underlying BAML function "GetOrderInfo"
 * with the specified parameters.
 *
 * @param { Email } email - Input parameter.
 *
 * @returns {Promise<OrderInfo>} A promise that resolves with the result of the action.
 */
export const GetOrderInfo = async (
  email: Email,
): Promise<OrderInfo> => {
  return b.GetOrderInfo(
    email,
  );
};

/**
 * Executes the "GetQuery" BAML action.
 *
 * This server action calls the underlying BAML function "GetQuery"
 * with the specified parameters.
 *
 * @param { string } query - Input parameter.
 *
 * @returns {Promise<SearchParams>} A promise that resolves with the result of the action.
 */
export const GetQuery = async (
  query: string,
): Promise<SearchParams> => {
  return b.GetQuery(
    query,
  );
};

/**
 * Executes the "InOutEnumMapKey" BAML action.
 *
 * This server action calls the underlying BAML function "InOutEnumMapKey"
 * with the specified parameters.
 *
 * @param { Partial<Record<types.MapKey, string>> } i1 - Input parameter.
 * @param { Partial<Record<types.MapKey, string>> } i2 - Input parameter.
 *
 * @returns {Promise<Partial<Record<types.MapKey, string>>>} A promise that resolves with the result of the action.
 */
export const InOutEnumMapKey = async (
  i1: Partial<Record<types.MapKey, string>>,
  i2: Partial<Record<types.MapKey, string>>,
): Promise<Partial<Record<types.MapKey, string>>> => {
  return b.InOutEnumMapKey(
    i1,
    i2,
  );
};

/**
 * Executes the "InOutLiteralStringUnionMapKey" BAML action.
 *
 * This server action calls the underlying BAML function "InOutLiteralStringUnionMapKey"
 * with the specified parameters.
 *
 * @param { Partial<Record<"one" | "two" | "three" | "four", string>> } i1 - Input parameter.
 * @param { Partial<Record<"one" | "two" | "three" | "four", string>> } i2 - Input parameter.
 *
 * @returns {Promise<Partial<Record<"one" | "two" | "three" | "four", string>>>} A promise that resolves with the result of the action.
 */
export const InOutLiteralStringUnionMapKey = async (
  i1: Partial<Record<"one" | "two" | "three" | "four", string>>,
  i2: Partial<Record<"one" | "two" | "three" | "four", string>>,
): Promise<Partial<Record<"one" | "two" | "three" | "four", string>>> => {
  return b.InOutLiteralStringUnionMapKey(
    i1,
    i2,
  );
};

/**
 * Executes the "InOutSingleLiteralStringMapKey" BAML action.
 *
 * This server action calls the underlying BAML function "InOutSingleLiteralStringMapKey"
 * with the specified parameters.
 *
 * @param { Partial<Record<"key", string>> } m - Input parameter.
 *
 * @returns {Promise<Partial<Record<"key", string>>>} A promise that resolves with the result of the action.
 */
export const InOutSingleLiteralStringMapKey = async (
  m: Partial<Record<"key", string>>,
): Promise<Partial<Record<"key", string>>> => {
  return b.InOutSingleLiteralStringMapKey(
    m,
  );
};

/**
 * Executes the "JsonTypeAliasCycle" BAML action.
 *
 * This server action calls the underlying BAML function "JsonTypeAliasCycle"
 * with the specified parameters.
 *
 * @param { JsonValue } input - Input parameter.
 *
 * @returns {Promise<JsonValue>} A promise that resolves with the result of the action.
 */
export const JsonTypeAliasCycle = async (
  input: JsonValue,
): Promise<JsonValue> => {
  return b.JsonTypeAliasCycle(
    input,
  );
};

/**
 * Executes the "LiteralUnionsTest" BAML action.
 *
 * This server action calls the underlying BAML function "LiteralUnionsTest"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<1 | true | "string output">} A promise that resolves with the result of the action.
 */
export const LiteralUnionsTest = async (
  input: string,
): Promise<1 | true | "string output"> => {
  return b.LiteralUnionsTest(
    input,
  );
};

/**
 * Executes the "MakeBlockConstraint" BAML action.
 *
 * This server action calls the underlying BAML function "MakeBlockConstraint"
 * with the specified parameters.
 *
 *
 * @returns {Promise<Checked<BlockConstraint,"cross_field">>} A promise that resolves with the result of the action.
 */
export const MakeBlockConstraint = async (
): Promise<Checked<BlockConstraint,"cross_field">> => {
  return b.MakeBlockConstraint(
  );
};

/**
 * Executes the "MakeNestedBlockConstraint" BAML action.
 *
 * This server action calls the underlying BAML function "MakeNestedBlockConstraint"
 * with the specified parameters.
 *
 *
 * @returns {Promise<NestedBlockConstraint>} A promise that resolves with the result of the action.
 */
export const MakeNestedBlockConstraint = async (
): Promise<NestedBlockConstraint> => {
  return b.MakeNestedBlockConstraint(
  );
};

/**
 * Executes the "MakeSemanticContainer" BAML action.
 *
 * This server action calls the underlying BAML function "MakeSemanticContainer"
 * with the specified parameters.
 *
 *
 * @returns {Promise<SemanticContainer>} A promise that resolves with the result of the action.
 */
export const MakeSemanticContainer = async (
): Promise<SemanticContainer> => {
  return b.MakeSemanticContainer(
  );
};

/**
 * Executes the "MapAlias" BAML action.
 *
 * This server action calls the underlying BAML function "MapAlias"
 * with the specified parameters.
 *
 * @param { Record<string, string[]> } m - Input parameter.
 *
 * @returns {Promise<Record<string, string[]>>} A promise that resolves with the result of the action.
 */
export const MapAlias = async (
  m: Record<string, string[]>,
): Promise<Record<string, string[]>> => {
  return b.MapAlias(
    m,
  );
};

/**
 * Executes the "MergeAliasAttributes" BAML action.
 *
 * This server action calls the underlying BAML function "MergeAliasAttributes"
 * with the specified parameters.
 *
 * @param { number } money - Input parameter.
 *
 * @returns {Promise<MergeAttrs>} A promise that resolves with the result of the action.
 */
export const MergeAliasAttributes = async (
  money: number,
): Promise<MergeAttrs> => {
  return b.MergeAliasAttributes(
    money,
  );
};

/**
 * Executes the "MyFunc" BAML action.
 *
 * This server action calls the underlying BAML function "MyFunc"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<DynamicOutput>} A promise that resolves with the result of the action.
 */
export const MyFunc = async (
  input: string,
): Promise<DynamicOutput> => {
  return b.MyFunc(
    input,
  );
};

/**
 * Executes the "NestedAlias" BAML action.
 *
 * This server action calls the underlying BAML function "NestedAlias"
 * with the specified parameters.
 *
 * @param { number | string | boolean | number | string[] | Record<string, string[]> } c - Input parameter.
 *
 * @returns {Promise<number | string | boolean | number | string[] | Record<string, string[]>>} A promise that resolves with the result of the action.
 */
export const NestedAlias = async (
  c: number | string | boolean | number | string[] | Record<string, string[]>,
): Promise<number | string | boolean | number | string[] | Record<string, string[]>> => {
  return b.NestedAlias(
    c,
  );
};

/**
 * Executes the "NullLiteralClassHello" BAML action.
 *
 * This server action calls the underlying BAML function "NullLiteralClassHello"
 * with the specified parameters.
 *
 * @param { string } s - Input parameter.
 *
 * @returns {Promise<ClassForNullLiteral>} A promise that resolves with the result of the action.
 */
export const NullLiteralClassHello = async (
  s: string,
): Promise<ClassForNullLiteral> => {
  return b.NullLiteralClassHello(
    s,
  );
};

/**
 * Executes the "OptionalTest_Function" BAML action.
 *
 * This server action calls the underlying BAML function "OptionalTest_Function"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<(OptionalTest_ReturnType | null)[]>} A promise that resolves with the result of the action.
 */
export const OptionalTest_Function = async (
  input: string,
): Promise<(OptionalTest_ReturnType | null)[]> => {
  return b.OptionalTest_Function(
    input,
  );
};

/**
 * Executes the "PredictAge" BAML action.
 *
 * This server action calls the underlying BAML function "PredictAge"
 * with the specified parameters.
 *
 * @param { string } name - Input parameter.
 *
 * @returns {Promise<FooAny>} A promise that resolves with the result of the action.
 */
export const PredictAge = async (
  name: string,
): Promise<FooAny> => {
  return b.PredictAge(
    name,
  );
};

/**
 * Executes the "PredictAgeBare" BAML action.
 *
 * This server action calls the underlying BAML function "PredictAgeBare"
 * with the specified parameters.
 *
 * @param { string } inp - Input parameter.
 *
 * @returns {Promise<Checked<number,"too_big">>} A promise that resolves with the result of the action.
 */
export const PredictAgeBare = async (
  inp: string,
): Promise<Checked<number,"too_big">> => {
  return b.PredictAgeBare(
    inp,
  );
};

/**
 * Executes the "PrimitiveAlias" BAML action.
 *
 * This server action calls the underlying BAML function "PrimitiveAlias"
 * with the specified parameters.
 *
 * @param { number | string | boolean | number } p - Input parameter.
 *
 * @returns {Promise<number | string | boolean | number>} A promise that resolves with the result of the action.
 */
export const PrimitiveAlias = async (
  p: number | string | boolean | number,
): Promise<number | string | boolean | number> => {
  return b.PrimitiveAlias(
    p,
  );
};

/**
 * Executes the "PromptTestClaude" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestClaude"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestClaude = async (
  input: string,
): Promise<string> => {
  return b.PromptTestClaude(
    input,
  );
};

/**
 * Executes the "PromptTestClaudeChat" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestClaudeChat"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestClaudeChat = async (
  input: string,
): Promise<string> => {
  return b.PromptTestClaudeChat(
    input,
  );
};

/**
 * Executes the "PromptTestClaudeChatNoSystem" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestClaudeChatNoSystem"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestClaudeChatNoSystem = async (
  input: string,
): Promise<string> => {
  return b.PromptTestClaudeChatNoSystem(
    input,
  );
};

/**
 * Executes the "PromptTestOpenAI" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestOpenAI"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestOpenAI = async (
  input: string,
): Promise<string> => {
  return b.PromptTestOpenAI(
    input,
  );
};

/**
 * Executes the "PromptTestOpenAIChat" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestOpenAIChat"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestOpenAIChat = async (
  input: string,
): Promise<string> => {
  return b.PromptTestOpenAIChat(
    input,
  );
};

/**
 * Executes the "PromptTestOpenAIChatNoSystem" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestOpenAIChatNoSystem"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestOpenAIChatNoSystem = async (
  input: string,
): Promise<string> => {
  return b.PromptTestOpenAIChatNoSystem(
    input,
  );
};

/**
 * Executes the "PromptTestStreaming" BAML action.
 *
 * This server action calls the underlying BAML function "PromptTestStreaming"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const PromptTestStreaming = async (
  input: string,
): Promise<string> => {
  return b.PromptTestStreaming(
    input,
  );
};

/**
 * Executes the "RecursiveAliasCycle" BAML action.
 *
 * This server action calls the underlying BAML function "RecursiveAliasCycle"
 * with the specified parameters.
 *
 * @param { RecAliasOne } input - Input parameter.
 *
 * @returns {Promise<RecAliasOne>} A promise that resolves with the result of the action.
 */
export const RecursiveAliasCycle = async (
  input: RecAliasOne,
): Promise<RecAliasOne> => {
  return b.RecursiveAliasCycle(
    input,
  );
};

/**
 * Executes the "RecursiveClassWithAliasIndirection" BAML action.
 *
 * This server action calls the underlying BAML function "RecursiveClassWithAliasIndirection"
 * with the specified parameters.
 *
 * @param { NodeWithAliasIndirection } cls - Input parameter.
 *
 * @returns {Promise<NodeWithAliasIndirection>} A promise that resolves with the result of the action.
 */
export const RecursiveClassWithAliasIndirection = async (
  cls: NodeWithAliasIndirection,
): Promise<NodeWithAliasIndirection> => {
  return b.RecursiveClassWithAliasIndirection(
    cls,
  );
};

/**
 * Executes the "ReturnAliasWithMergedAttributes" BAML action.
 *
 * This server action calls the underlying BAML function "ReturnAliasWithMergedAttributes"
 * with the specified parameters.
 *
 * @param { Checked<number,"gt_ten"> } money - Input parameter.
 *
 * @returns {Promise<Checked<number,"gt_ten">>} A promise that resolves with the result of the action.
 */
export const ReturnAliasWithMergedAttributes = async (
  money: Checked<number,"gt_ten">,
): Promise<Checked<number,"gt_ten">> => {
  return b.ReturnAliasWithMergedAttributes(
    money,
  );
};

/**
 * Executes the "ReturnFailingAssert" BAML action.
 *
 * This server action calls the underlying BAML function "ReturnFailingAssert"
 * with the specified parameters.
 *
 * @param { number } inp - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const ReturnFailingAssert = async (
  inp: number,
): Promise<number> => {
  return b.ReturnFailingAssert(
    inp,
  );
};

/**
 * Executes the "ReturnJsonEntry" BAML action.
 *
 * This server action calls the underlying BAML function "ReturnJsonEntry"
 * with the specified parameters.
 *
 * @param { string } s - Input parameter.
 *
 * @returns {Promise<JsonTemplate>} A promise that resolves with the result of the action.
 */
export const ReturnJsonEntry = async (
  s: string,
): Promise<JsonTemplate> => {
  return b.ReturnJsonEntry(
    s,
  );
};

/**
 * Executes the "ReturnMalformedConstraints" BAML action.
 *
 * This server action calls the underlying BAML function "ReturnMalformedConstraints"
 * with the specified parameters.
 *
 * @param { number } a - Input parameter.
 *
 * @returns {Promise<MalformedConstraints>} A promise that resolves with the result of the action.
 */
export const ReturnMalformedConstraints = async (
  a: number,
): Promise<MalformedConstraints> => {
  return b.ReturnMalformedConstraints(
    a,
  );
};

/**
 * Executes the "SchemaDescriptions" BAML action.
 *
 * This server action calls the underlying BAML function "SchemaDescriptions"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<Schema>} A promise that resolves with the result of the action.
 */
export const SchemaDescriptions = async (
  input: string,
): Promise<Schema> => {
  return b.SchemaDescriptions(
    input,
  );
};

/**
 * Executes the "SimpleRecursiveListAlias" BAML action.
 *
 * This server action calls the underlying BAML function "SimpleRecursiveListAlias"
 * with the specified parameters.
 *
 * @param { RecursiveListAlias } input - Input parameter.
 *
 * @returns {Promise<RecursiveListAlias>} A promise that resolves with the result of the action.
 */
export const SimpleRecursiveListAlias = async (
  input: RecursiveListAlias,
): Promise<RecursiveListAlias> => {
  return b.SimpleRecursiveListAlias(
    input,
  );
};

/**
 * Executes the "SimpleRecursiveMapAlias" BAML action.
 *
 * This server action calls the underlying BAML function "SimpleRecursiveMapAlias"
 * with the specified parameters.
 *
 * @param { RecursiveMapAlias } input - Input parameter.
 *
 * @returns {Promise<RecursiveMapAlias>} A promise that resolves with the result of the action.
 */
export const SimpleRecursiveMapAlias = async (
  input: RecursiveMapAlias,
): Promise<RecursiveMapAlias> => {
  return b.SimpleRecursiveMapAlias(
    input,
  );
};

/**
 * Executes the "StreamBigNumbers" BAML action.
 *
 * This server action calls the underlying BAML function "StreamBigNumbers"
 * with the specified parameters.
 *
 * @param { number } digits - Input parameter.
 *
 * @returns {Promise<BigNumbers>} A promise that resolves with the result of the action.
 */
export const StreamBigNumbers = async (
  digits: number,
): Promise<BigNumbers> => {
  return b.StreamBigNumbers(
    digits,
  );
};

/**
 * Executes the "StreamFailingAssertion" BAML action.
 *
 * This server action calls the underlying BAML function "StreamFailingAssertion"
 * with the specified parameters.
 *
 * @param { string } theme - Input parameter.
 * @param { number } length - Input parameter.
 *
 * @returns {Promise<TwoStoriesOneTitle>} A promise that resolves with the result of the action.
 */
export const StreamFailingAssertion = async (
  theme: string,
  length: number,
): Promise<TwoStoriesOneTitle> => {
  return b.StreamFailingAssertion(
    theme,
    length,
  );
};

/**
 * Executes the "StreamOneBigNumber" BAML action.
 *
 * This server action calls the underlying BAML function "StreamOneBigNumber"
 * with the specified parameters.
 *
 * @param { number } digits - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const StreamOneBigNumber = async (
  digits: number,
): Promise<number> => {
  return b.StreamOneBigNumber(
    digits,
  );
};

/**
 * Executes the "StreamUnionIntegers" BAML action.
 *
 * This server action calls the underlying BAML function "StreamUnionIntegers"
 * with the specified parameters.
 *
 * @param { number } digits - Input parameter.
 *
 * @returns {Promise<(number | string)[]>} A promise that resolves with the result of the action.
 */
export const StreamUnionIntegers = async (
  digits: number,
): Promise<(number | string)[]> => {
  return b.StreamUnionIntegers(
    digits,
  );
};

/**
 * Executes the "StreamingCompoundNumbers" BAML action.
 *
 * This server action calls the underlying BAML function "StreamingCompoundNumbers"
 * with the specified parameters.
 *
 * @param { number } digits - Input parameter.
 * @param { boolean } yapping - Input parameter.
 *
 * @returns {Promise<CompoundBigNumbers>} A promise that resolves with the result of the action.
 */
export const StreamingCompoundNumbers = async (
  digits: number,
  yapping: boolean,
): Promise<CompoundBigNumbers> => {
  return b.StreamingCompoundNumbers(
    digits,
    yapping,
  );
};

/**
 * Executes the "TakeRecAliasDep" BAML action.
 *
 * This server action calls the underlying BAML function "TakeRecAliasDep"
 * with the specified parameters.
 *
 * @param { RecursiveAliasDependency } input - Input parameter.
 *
 * @returns {Promise<RecursiveAliasDependency>} A promise that resolves with the result of the action.
 */
export const TakeRecAliasDep = async (
  input: RecursiveAliasDependency,
): Promise<RecursiveAliasDependency> => {
  return b.TakeRecAliasDep(
    input,
  );
};

/**
 * Executes the "TestAnthropic" BAML action.
 *
 * This server action calls the underlying BAML function "TestAnthropic"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAnthropic = async (
  input: string,
): Promise<string> => {
  return b.TestAnthropic(
    input,
  );
};

/**
 * Executes the "TestAnthropicShorthand" BAML action.
 *
 * This server action calls the underlying BAML function "TestAnthropicShorthand"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAnthropicShorthand = async (
  input: string,
): Promise<string> => {
  return b.TestAnthropicShorthand(
    input,
  );
};

/**
 * Executes the "TestAws" BAML action.
 *
 * This server action calls the underlying BAML function "TestAws"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAws = async (
  input: string,
): Promise<string> => {
  return b.TestAws(
    input,
  );
};

/**
 * Executes the "TestAwsInvalidAccessKey" BAML action.
 *
 * This server action calls the underlying BAML function "TestAwsInvalidAccessKey"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAwsInvalidAccessKey = async (
  input: string,
): Promise<string> => {
  return b.TestAwsInvalidAccessKey(
    input,
  );
};

/**
 * Executes the "TestAwsInvalidProfile" BAML action.
 *
 * This server action calls the underlying BAML function "TestAwsInvalidProfile"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAwsInvalidProfile = async (
  input: string,
): Promise<string> => {
  return b.TestAwsInvalidProfile(
    input,
  );
};

/**
 * Executes the "TestAwsInvalidRegion" BAML action.
 *
 * This server action calls the underlying BAML function "TestAwsInvalidRegion"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAwsInvalidRegion = async (
  input: string,
): Promise<string> => {
  return b.TestAwsInvalidRegion(
    input,
  );
};

/**
 * Executes the "TestAwsInvalidSessionToken" BAML action.
 *
 * This server action calls the underlying BAML function "TestAwsInvalidSessionToken"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAwsInvalidSessionToken = async (
  input: string,
): Promise<string> => {
  return b.TestAwsInvalidSessionToken(
    input,
  );
};

/**
 * Executes the "TestAzure" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzure"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzure = async (
  input: string,
): Promise<string> => {
  return b.TestAzure(
    input,
  );
};

/**
 * Executes the "TestAzureFailure" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureFailure"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureFailure = async (
  input: string,
): Promise<string> => {
  return b.TestAzureFailure(
    input,
  );
};

/**
 * Executes the "TestAzureO1NoMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureO1NoMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureO1NoMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureO1NoMaxTokens(
    input,
  );
};

/**
 * Executes the "TestAzureO1WithMaxCompletionTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureO1WithMaxCompletionTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureO1WithMaxCompletionTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureO1WithMaxCompletionTokens(
    input,
  );
};

/**
 * Executes the "TestAzureO1WithMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureO1WithMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureO1WithMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureO1WithMaxTokens(
    input,
  );
};

/**
 * Executes the "TestAzureO3NoMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureO3NoMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureO3NoMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureO3NoMaxTokens(
    input,
  );
};

/**
 * Executes the "TestAzureO3WithMaxCompletionTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureO3WithMaxCompletionTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureO3WithMaxCompletionTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureO3WithMaxCompletionTokens(
    input,
  );
};

/**
 * Executes the "TestAzureWithMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestAzureWithMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestAzureWithMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestAzureWithMaxTokens(
    input,
  );
};

/**
 * Executes the "TestCaching" BAML action.
 *
 * This server action calls the underlying BAML function "TestCaching"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 * @param { string } not_cached - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestCaching = async (
  input: string,
  not_cached: string,
): Promise<string> => {
  return b.TestCaching(
    input,
    not_cached,
  );
};

/**
 * Executes the "TestFallbackClient" BAML action.
 *
 * This server action calls the underlying BAML function "TestFallbackClient"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFallbackClient = async (
): Promise<string> => {
  return b.TestFallbackClient(
  );
};

/**
 * Executes the "TestFallbackToShorthand" BAML action.
 *
 * This server action calls the underlying BAML function "TestFallbackToShorthand"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFallbackToShorthand = async (
  input: string,
): Promise<string> => {
  return b.TestFallbackToShorthand(
    input,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleBool" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleBool"
 * with the specified parameters.
 *
 * @param { boolean } myBool - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleBool = async (
  myBool: boolean,
): Promise<string> => {
  return b.TestFnNamedArgsSingleBool(
    myBool,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleClass" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleClass"
 * with the specified parameters.
 *
 * @param { NamedArgsSingleClass } myArg - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleClass = async (
  myArg: NamedArgsSingleClass,
): Promise<string> => {
  return b.TestFnNamedArgsSingleClass(
    myArg,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleEnumList" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleEnumList"
 * with the specified parameters.
 *
 * @param { NamedArgsSingleEnumList[] } myArg - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleEnumList = async (
  myArg: NamedArgsSingleEnumList[],
): Promise<string> => {
  return b.TestFnNamedArgsSingleEnumList(
    myArg,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleFloat" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleFloat"
 * with the specified parameters.
 *
 * @param { number } myFloat - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleFloat = async (
  myFloat: number,
): Promise<string> => {
  return b.TestFnNamedArgsSingleFloat(
    myFloat,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleInt" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleInt"
 * with the specified parameters.
 *
 * @param { number } myInt - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleInt = async (
  myInt: number,
): Promise<string> => {
  return b.TestFnNamedArgsSingleInt(
    myInt,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleMapStringToClass" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleMapStringToClass"
 * with the specified parameters.
 *
 * @param { Record<string, StringToClassEntry> } myMap - Input parameter.
 *
 * @returns {Promise<Record<string, StringToClassEntry>>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleMapStringToClass = async (
  myMap: Record<string, StringToClassEntry>,
): Promise<Record<string, StringToClassEntry>> => {
  return b.TestFnNamedArgsSingleMapStringToClass(
    myMap,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleMapStringToMap" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleMapStringToMap"
 * with the specified parameters.
 *
 * @param { Record<string, Record<string, string>> } myMap - Input parameter.
 *
 * @returns {Promise<Record<string, Record<string, string>>>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleMapStringToMap = async (
  myMap: Record<string, Record<string, string>>,
): Promise<Record<string, Record<string, string>>> => {
  return b.TestFnNamedArgsSingleMapStringToMap(
    myMap,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleMapStringToString" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleMapStringToString"
 * with the specified parameters.
 *
 * @param { Record<string, string> } myMap - Input parameter.
 *
 * @returns {Promise<Record<string, string>>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleMapStringToString = async (
  myMap: Record<string, string>,
): Promise<Record<string, string>> => {
  return b.TestFnNamedArgsSingleMapStringToString(
    myMap,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleString" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleString"
 * with the specified parameters.
 *
 * @param { string } myString - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleString = async (
  myString: string,
): Promise<string> => {
  return b.TestFnNamedArgsSingleString(
    myString,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleStringArray" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleStringArray"
 * with the specified parameters.
 *
 * @param { string[] } myStringArray - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleStringArray = async (
  myStringArray: string[],
): Promise<string> => {
  return b.TestFnNamedArgsSingleStringArray(
    myStringArray,
  );
};

/**
 * Executes the "TestFnNamedArgsSingleStringList" BAML action.
 *
 * This server action calls the underlying BAML function "TestFnNamedArgsSingleStringList"
 * with the specified parameters.
 *
 * @param { string[] } myArg - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestFnNamedArgsSingleStringList = async (
  myArg: string[],
): Promise<string> => {
  return b.TestFnNamedArgsSingleStringList(
    myArg,
  );
};

/**
 * Executes the "TestGemini" BAML action.
 *
 * This server action calls the underlying BAML function "TestGemini"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestGemini = async (
  input: string,
): Promise<string> => {
  return b.TestGemini(
    input,
  );
};

/**
 * Executes the "TestGeminiOpenAiGeneric" BAML action.
 *
 * This server action calls the underlying BAML function "TestGeminiOpenAiGeneric"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestGeminiOpenAiGeneric = async (
): Promise<string> => {
  return b.TestGeminiOpenAiGeneric(
  );
};

/**
 * Executes the "TestGeminiSystem" BAML action.
 *
 * This server action calls the underlying BAML function "TestGeminiSystem"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestGeminiSystem = async (
  input: string,
): Promise<string> => {
  return b.TestGeminiSystem(
    input,
  );
};

/**
 * Executes the "TestGeminiSystemAsChat" BAML action.
 *
 * This server action calls the underlying BAML function "TestGeminiSystemAsChat"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestGeminiSystemAsChat = async (
  input: string,
): Promise<string> => {
  return b.TestGeminiSystemAsChat(
    input,
  );
};

/**
 * Executes the "TestImageInput" BAML action.
 *
 * This server action calls the underlying BAML function "TestImageInput"
 * with the specified parameters.
 *
 * @param { Image } img - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestImageInput = async (
  img: Image,
): Promise<string> => {
  return b.TestImageInput(
    img,
  );
};

/**
 * Executes the "TestImageInputAnthropic" BAML action.
 *
 * This server action calls the underlying BAML function "TestImageInputAnthropic"
 * with the specified parameters.
 *
 * @param { Image } img - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestImageInputAnthropic = async (
  img: Image,
): Promise<string> => {
  return b.TestImageInputAnthropic(
    img,
  );
};

/**
 * Executes the "TestImageListInput" BAML action.
 *
 * This server action calls the underlying BAML function "TestImageListInput"
 * with the specified parameters.
 *
 * @param { Image[] } imgs - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestImageListInput = async (
  imgs: Image[],
): Promise<string> => {
  return b.TestImageListInput(
    imgs,
  );
};

/**
 * Executes the "TestMemory" BAML action.
 *
 * This server action calls the underlying BAML function "TestMemory"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<TestMemoryOutput>} A promise that resolves with the result of the action.
 */
export const TestMemory = async (
  input: string,
): Promise<TestMemoryOutput> => {
  return b.TestMemory(
    input,
  );
};

/**
 * Executes the "TestMulticlassNamedArgs" BAML action.
 *
 * This server action calls the underlying BAML function "TestMulticlassNamedArgs"
 * with the specified parameters.
 *
 * @param { NamedArgsSingleClass } myArg - Input parameter.
 * @param { NamedArgsSingleClass } myArg2 - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestMulticlassNamedArgs = async (
  myArg: NamedArgsSingleClass,
  myArg2: NamedArgsSingleClass,
): Promise<string> => {
  return b.TestMulticlassNamedArgs(
    myArg,
    myArg2,
  );
};

/**
 * Executes the "TestNamedArgsLiteralBool" BAML action.
 *
 * This server action calls the underlying BAML function "TestNamedArgsLiteralBool"
 * with the specified parameters.
 *
 * @param { true } myBool - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestNamedArgsLiteralBool = async (
  myBool: true,
): Promise<string> => {
  return b.TestNamedArgsLiteralBool(
    myBool,
  );
};

/**
 * Executes the "TestNamedArgsLiteralInt" BAML action.
 *
 * This server action calls the underlying BAML function "TestNamedArgsLiteralInt"
 * with the specified parameters.
 *
 * @param { 1 } myInt - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestNamedArgsLiteralInt = async (
  myInt: 1,
): Promise<string> => {
  return b.TestNamedArgsLiteralInt(
    myInt,
  );
};

/**
 * Executes the "TestNamedArgsLiteralString" BAML action.
 *
 * This server action calls the underlying BAML function "TestNamedArgsLiteralString"
 * with the specified parameters.
 *
 * @param { "My String" } myString - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestNamedArgsLiteralString = async (
  myString: "My String",
): Promise<string> => {
  return b.TestNamedArgsLiteralString(
    myString,
  );
};

/**
 * Executes the "TestOllama" BAML action.
 *
 * This server action calls the underlying BAML function "TestOllama"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOllama = async (
  input: string,
): Promise<string> => {
  return b.TestOllama(
    input,
  );
};

/**
 * Executes the "TestOpenAI" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAI"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAI = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAI(
    input,
  );
};

/**
 * Executes the "TestOpenAILegacyProvider" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAILegacyProvider"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAILegacyProvider = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAILegacyProvider(
    input,
  );
};

/**
 * Executes the "TestOpenAIO1NoMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIO1NoMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIO1NoMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIO1NoMaxTokens(
    input,
  );
};

/**
 * Executes the "TestOpenAIO1WithMaxCompletionTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIO1WithMaxCompletionTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIO1WithMaxCompletionTokens = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIO1WithMaxCompletionTokens(
    input,
  );
};

/**
 * Executes the "TestOpenAIO1WithMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIO1WithMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIO1WithMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIO1WithMaxTokens(
    input,
  );
};

/**
 * Executes the "TestOpenAIShorthand" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIShorthand"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIShorthand = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIShorthand(
    input,
  );
};

/**
 * Executes the "TestOpenAIWithMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIWithMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIWithMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIWithMaxTokens(
    input,
  );
};

/**
 * Executes the "TestOpenAIWithNullMaxTokens" BAML action.
 *
 * This server action calls the underlying BAML function "TestOpenAIWithNullMaxTokens"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestOpenAIWithNullMaxTokens = async (
  input: string,
): Promise<string> => {
  return b.TestOpenAIWithNullMaxTokens(
    input,
  );
};

/**
 * Executes the "TestRetryConstant" BAML action.
 *
 * This server action calls the underlying BAML function "TestRetryConstant"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestRetryConstant = async (
): Promise<string> => {
  return b.TestRetryConstant(
  );
};

/**
 * Executes the "TestRetryExponential" BAML action.
 *
 * This server action calls the underlying BAML function "TestRetryExponential"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestRetryExponential = async (
): Promise<string> => {
  return b.TestRetryExponential(
  );
};

/**
 * Executes the "TestSingleFallbackClient" BAML action.
 *
 * This server action calls the underlying BAML function "TestSingleFallbackClient"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestSingleFallbackClient = async (
): Promise<string> => {
  return b.TestSingleFallbackClient(
  );
};

/**
 * Executes the "TestUniverseQuestion" BAML action.
 *
 * This server action calls the underlying BAML function "TestUniverseQuestion"
 * with the specified parameters.
 *
 * @param { UniverseQuestionInput } question - Input parameter.
 *
 * @returns {Promise<UniverseQuestion>} A promise that resolves with the result of the action.
 */
export const TestUniverseQuestion = async (
  question: UniverseQuestionInput,
): Promise<UniverseQuestion> => {
  return b.TestUniverseQuestion(
    question,
  );
};

/**
 * Executes the "TestVertex" BAML action.
 *
 * This server action calls the underlying BAML function "TestVertex"
 * with the specified parameters.
 *
 * @param { string } input - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestVertex = async (
  input: string,
): Promise<string> => {
  return b.TestVertex(
    input,
  );
};

/**
 * Executes the "TestVertexWithSystemInstructions" BAML action.
 *
 * This server action calls the underlying BAML function "TestVertexWithSystemInstructions"
 * with the specified parameters.
 *
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const TestVertexWithSystemInstructions = async (
): Promise<string> => {
  return b.TestVertexWithSystemInstructions(
  );
};

/**
 * Executes the "UnionTest_Function" BAML action.
 *
 * This server action calls the underlying BAML function "UnionTest_Function"
 * with the specified parameters.
 *
 * @param { string | boolean } input - Input parameter.
 *
 * @returns {Promise<UnionTest_ReturnType>} A promise that resolves with the result of the action.
 */
export const UnionTest_Function = async (
  input: string | boolean,
): Promise<UnionTest_ReturnType> => {
  return b.UnionTest_Function(
    input,
  );
};

/**
 * Executes the "UseBlockConstraint" BAML action.
 *
 * This server action calls the underlying BAML function "UseBlockConstraint"
 * with the specified parameters.
 *
 * @param { BlockConstraintForParam } inp - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const UseBlockConstraint = async (
  inp: BlockConstraintForParam,
): Promise<number> => {
  return b.UseBlockConstraint(
    inp,
  );
};

/**
 * Executes the "UseMalformedConstraints" BAML action.
 *
 * This server action calls the underlying BAML function "UseMalformedConstraints"
 * with the specified parameters.
 *
 * @param { MalformedConstraints2 } a - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const UseMalformedConstraints = async (
  a: MalformedConstraints2,
): Promise<number> => {
  return b.UseMalformedConstraints(
    a,
  );
};

/**
 * Executes the "UseNestedBlockConstraint" BAML action.
 *
 * This server action calls the underlying BAML function "UseNestedBlockConstraint"
 * with the specified parameters.
 *
 * @param { NestedBlockConstraintForParam } inp - Input parameter.
 *
 * @returns {Promise<number>} A promise that resolves with the result of the action.
 */
export const UseNestedBlockConstraint = async (
  inp: NestedBlockConstraintForParam,
): Promise<number> => {
  return b.UseNestedBlockConstraint(
    inp,
  );
};