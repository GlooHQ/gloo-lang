/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { BamlStream } from '@boundaryml/baml';
export async function AaaSamOutputFormatAction(
    recipe: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AaaSamOutputFormat(
        recipe
    )

    return stream.toStreamable()
}

export async function AliasThatPointsToRecursiveTypeAction(
    list: LinkedListAliasNode
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasThatPointsToRecursiveType(
        list
    )

    return stream.toStreamable()
}

export async function AliasWithMultipleAttrsAction(
    money: Checked<number,"gt_ten">
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasWithMultipleAttrs(
        money
    )

    return stream.toStreamable()
}

export async function AliasedInputClassAction(
    input: InputClass
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasedInputClass(
        input
    )

    return stream.toStreamable()
}

export async function AliasedInputClass2Action(
    input: InputClass
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasedInputClass2(
        input
    )

    return stream.toStreamable()
}

export async function AliasedInputClassNestedAction(
    input: InputClassNested
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasedInputClassNested(
        input
    )

    return stream.toStreamable()
}

export async function AliasedInputEnumAction(
    input: AliasedEnum
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasedInputEnum(
        input
    )

    return stream.toStreamable()
}

export async function AliasedInputListAction(
    input: AliasedEnum[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AliasedInputList(
        input
    )

    return stream.toStreamable()
}

export async function AllowedOptionalsAction(
    optionals: OptionalListAndMap
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AllowedOptionals(
        optionals
    )

    return stream.toStreamable()
}

export async function AudioInputAction(
    aud: Audio
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.AudioInput(
        aud
    )

    return stream.toStreamable()
}

export async function BuildLinkedListAction(
    input: number[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.BuildLinkedList(
        input
    )

    return stream.toStreamable()
}

export async function BuildTreeAction(
    input: BinaryNode
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.BuildTree(
        input
    )

    return stream.toStreamable()
}

export async function ClassThatPointsToRecursiveClassThroughAliasAction(
    cls: ClassToRecAlias
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ClassThatPointsToRecursiveClassThroughAlias(
        cls
    )

    return stream.toStreamable()
}

export async function ClassifyDynEnumTwoAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ClassifyDynEnumTwo(
        input
    )

    return stream.toStreamable()
}

export async function ClassifyMessageAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ClassifyMessage(
        input
    )

    return stream.toStreamable()
}

export async function ClassifyMessage2Action(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ClassifyMessage2(
        input
    )

    return stream.toStreamable()
}

export async function ClassifyMessage3Action(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ClassifyMessage3(
        input
    )

    return stream.toStreamable()
}

export async function CompletionAction(
    prefix: string,
    suffix: string,
    language: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.Completion(
        prefix,
        suffix,
        language
    )

    return stream.toStreamable()
}

export async function CustomTaskAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.CustomTask(
        input
    )

    return stream.toStreamable()
}

export async function DescribeImageAction(
    img: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DescribeImage(
        img
    )

    return stream.toStreamable()
}

export async function DescribeImage2Action(
    classWithImage: ClassWithImage,
    img2: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DescribeImage2(
        classWithImage,
        img2
    )

    return stream.toStreamable()
}

export async function DescribeImage3Action(
    classWithImage: ClassWithImage,
    img2: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DescribeImage3(
        classWithImage,
        img2
    )

    return stream.toStreamable()
}

export async function DescribeImage4Action(
    classWithImage: ClassWithImage,
    img2: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DescribeImage4(
        classWithImage,
        img2
    )

    return stream.toStreamable()
}

export async function DifferentiateUnionsAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DifferentiateUnions(
    )

    return stream.toStreamable()
}

export async function DummyOutputFunctionAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DummyOutputFunction(
        input
    )

    return stream.toStreamable()
}

export async function DynamicFuncAction(
    input: DynamicClassOne
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DynamicFunc(
        input
    )

    return stream.toStreamable()
}

export async function DynamicInputOutputAction(
    input: DynInputOutput
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DynamicInputOutput(
        input
    )

    return stream.toStreamable()
}

export async function DynamicListInputOutputAction(
    input: DynInputOutput[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.DynamicListInputOutput(
        input
    )

    return stream.toStreamable()
}

export async function ExpectFailureAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExpectFailure(
    )

    return stream.toStreamable()
}

export async function ExtractContactInfoAction(
    document: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractContactInfo(
        document
    )

    return stream.toStreamable()
}

export async function ExtractHobbyAction(
    text: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractHobby(
        text
    )

    return stream.toStreamable()
}

export async function ExtractNamesAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractNames(
        input
    )

    return stream.toStreamable()
}

export async function ExtractPeopleAction(
    text: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractPeople(
        text
    )

    return stream.toStreamable()
}

export async function ExtractReceiptInfoAction(
    email: string,
    reason: "curiosity" | "personal_finance"
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractReceiptInfo(
        email,
        reason
    )

    return stream.toStreamable()
}

export async function ExtractResumeAction(
    resume: string,
    img?: Image | null
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractResume(
        resume,
        img
    )

    return stream.toStreamable()
}

export async function ExtractResume2Action(
    resume: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ExtractResume2(
        resume
    )

    return stream.toStreamable()
}

export async function FnClassOptionalOutputAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnClassOptionalOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnClassOptionalOutput2Action(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnClassOptionalOutput2(
        input
    )

    return stream.toStreamable()
}

export async function FnEnumListOutputAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnEnumListOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnEnumOutputAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnEnumOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnLiteralClassInputOutputAction(
    input: LiteralClassHello
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnLiteralClassInputOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnLiteralUnionClassInputOutputAction(
    input: LiteralClassOne | LiteralClassTwo
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnLiteralUnionClassInputOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnNamedArgsSingleStringOptionalAction(
    myString?: string | null
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnNamedArgsSingleStringOptional(
        myString
    )

    return stream.toStreamable()
}

export async function FnOutputBoolAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputBool(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputClassAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputClass(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputClassListAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputClassList(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputClassNestedAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputClassNested(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputClassWithEnumAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputClassWithEnum(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputIntAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputInt(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputLiteralBoolAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputLiteralBool(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputLiteralIntAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputLiteralInt(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputLiteralStringAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputLiteralString(
        input
    )

    return stream.toStreamable()
}

export async function FnOutputStringListAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnOutputStringList(
        input
    )

    return stream.toStreamable()
}

export async function FnTestAliasedEnumOutputAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnTestAliasedEnumOutput(
        input
    )

    return stream.toStreamable()
}

export async function FnTestClassAliasAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnTestClassAlias(
        input
    )

    return stream.toStreamable()
}

export async function FnTestNamedArgsSingleEnumAction(
    myArg: NamedArgsSingleEnum
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.FnTestNamedArgsSingleEnum(
        myArg
    )

    return stream.toStreamable()
}

export async function GetDataTypeAction(
    text: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.GetDataType(
        text
    )

    return stream.toStreamable()
}

export async function GetOrderInfoAction(
    email: Email
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.GetOrderInfo(
        email
    )

    return stream.toStreamable()
}

export async function GetQueryAction(
    query: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.GetQuery(
        query
    )

    return stream.toStreamable()
}

export async function InOutEnumMapKeyAction(
    i1: Partial<Record<MapKey, string>>,
    i2: Partial<Record<MapKey, string>>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.InOutEnumMapKey(
        i1,
        i2
    )

    return stream.toStreamable()
}

export async function InOutLiteralStringUnionMapKeyAction(
    i1: Partial<Record<"one" | "two" | "three" | "four", string>>,
    i2: Partial<Record<"one" | "two" | "three" | "four", string>>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.InOutLiteralStringUnionMapKey(
        i1,
        i2
    )

    return stream.toStreamable()
}

export async function InOutSingleLiteralStringMapKeyAction(
    m: Partial<Record<"key", string>>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.InOutSingleLiteralStringMapKey(
        m
    )

    return stream.toStreamable()
}

export async function JsonTypeAliasCycleAction(
    input: JsonValue
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.JsonTypeAliasCycle(
        input
    )

    return stream.toStreamable()
}

export async function LiteralUnionsTestAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.LiteralUnionsTest(
        input
    )

    return stream.toStreamable()
}

export async function MakeBlockConstraintAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.MakeBlockConstraint(
    )

    return stream.toStreamable()
}

export async function MakeNestedBlockConstraintAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.MakeNestedBlockConstraint(
    )

    return stream.toStreamable()
}

export async function MapAliasAction(
    m: Record<string, string[]>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.MapAlias(
        m
    )

    return stream.toStreamable()
}

export async function MergeAliasAttributesAction(
    money: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.MergeAliasAttributes(
        money
    )

    return stream.toStreamable()
}

export async function MyFuncAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.MyFunc(
        input
    )

    return stream.toStreamable()
}

export async function NestedAliasAction(
    c: number | string | boolean | number | string[] | Record<string, string[]>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.NestedAlias(
        c
    )

    return stream.toStreamable()
}

export async function OptionalTest_FunctionAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.OptionalTest_Function(
        input
    )

    return stream.toStreamable()
}

export async function PredictAgeAction(
    name: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PredictAge(
        name
    )

    return stream.toStreamable()
}

export async function PredictAgeBareAction(
    inp: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PredictAgeBare(
        inp
    )

    return stream.toStreamable()
}

export async function PrimitiveAliasAction(
    p: number | string | boolean | number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PrimitiveAlias(
        p
    )

    return stream.toStreamable()
}

export async function PromptTestClaudeAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestClaude(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestClaudeChatAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestClaudeChat(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestClaudeChatNoSystemAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestClaudeChatNoSystem(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestOpenAIAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestOpenAI(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestOpenAIChatAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestOpenAIChat(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestOpenAIChatNoSystemAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestOpenAIChatNoSystem(
        input
    )

    return stream.toStreamable()
}

export async function PromptTestStreamingAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.PromptTestStreaming(
        input
    )

    return stream.toStreamable()
}

export async function RecursiveAliasCycleAction(
    input: RecAliasOne
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.RecursiveAliasCycle(
        input
    )

    return stream.toStreamable()
}

export async function RecursiveClassWithAliasIndirectionAction(
    cls: NodeWithAliasIndirection
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.RecursiveClassWithAliasIndirection(
        cls
    )

    return stream.toStreamable()
}

export async function ReturnAliasWithMergedAttributesAction(
    money: Checked<number,"gt_ten">
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ReturnAliasWithMergedAttributes(
        money
    )

    return stream.toStreamable()
}

export async function ReturnFailingAssertAction(
    inp: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ReturnFailingAssert(
        inp
    )

    return stream.toStreamable()
}

export async function ReturnMalformedConstraintsAction(
    a: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.ReturnMalformedConstraints(
        a
    )

    return stream.toStreamable()
}

export async function SchemaDescriptionsAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.SchemaDescriptions(
        input
    )

    return stream.toStreamable()
}

export async function SimpleRecursiveListAliasAction(
    input: RecursiveListAlias
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.SimpleRecursiveListAlias(
        input
    )

    return stream.toStreamable()
}

export async function SimpleRecursiveMapAliasAction(
    input: RecursiveMapAlias
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.SimpleRecursiveMapAlias(
        input
    )

    return stream.toStreamable()
}

export async function StreamBigNumbersAction(
    digits: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.StreamBigNumbers(
        digits
    )

    return stream.toStreamable()
}

export async function StreamFailingAssertionAction(
    theme: string,
    length: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.StreamFailingAssertion(
        theme,
        length
    )

    return stream.toStreamable()
}

export async function StreamOneBigNumberAction(
    digits: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.StreamOneBigNumber(
        digits
    )

    return stream.toStreamable()
}

export async function StreamUnionIntegersAction(
    digits: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.StreamUnionIntegers(
        digits
    )

    return stream.toStreamable()
}

export async function StreamingCompoundNumbersAction(
    digits: number,
    yapping: boolean
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.StreamingCompoundNumbers(
        digits,
        yapping
    )

    return stream.toStreamable()
}

export async function TestAnthropicAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAnthropic(
        input
    )

    return stream.toStreamable()
}

export async function TestAnthropicShorthandAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAnthropicShorthand(
        input
    )

    return stream.toStreamable()
}

export async function TestAwsAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAws(
        input
    )

    return stream.toStreamable()
}

export async function TestAwsInvalidAccessKeyAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAwsInvalidAccessKey(
        input
    )

    return stream.toStreamable()
}

export async function TestAwsInvalidProfileAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAwsInvalidProfile(
        input
    )

    return stream.toStreamable()
}

export async function TestAwsInvalidRegionAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAwsInvalidRegion(
        input
    )

    return stream.toStreamable()
}

export async function TestAwsInvalidSessionTokenAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAwsInvalidSessionToken(
        input
    )

    return stream.toStreamable()
}

export async function TestAzureAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAzure(
        input
    )

    return stream.toStreamable()
}

export async function TestAzureFailureAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestAzureFailure(
        input
    )

    return stream.toStreamable()
}

export async function TestCachingAction(
    input: string,
    not_cached: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestCaching(
        input,
        not_cached
    )

    return stream.toStreamable()
}

export async function TestFallbackClientAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFallbackClient(
    )

    return stream.toStreamable()
}

export async function TestFallbackToShorthandAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFallbackToShorthand(
        input
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleBoolAction(
    myBool: boolean
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleBool(
        myBool
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleClassAction(
    myArg: NamedArgsSingleClass
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleClass(
        myArg
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleEnumListAction(
    myArg: NamedArgsSingleEnumList[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleEnumList(
        myArg
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleFloatAction(
    myFloat: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleFloat(
        myFloat
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleIntAction(
    myInt: number
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleInt(
        myInt
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleMapStringToClassAction(
    myMap: Record<string, StringToClassEntry>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleMapStringToClass(
        myMap
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleMapStringToMapAction(
    myMap: Record<string, Record<string, string>>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleMapStringToMap(
        myMap
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleMapStringToStringAction(
    myMap: Record<string, string>
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleMapStringToString(
        myMap
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleStringAction(
    myString: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleString(
        myString
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleStringArrayAction(
    myStringArray: string[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleStringArray(
        myStringArray
    )

    return stream.toStreamable()
}

export async function TestFnNamedArgsSingleStringListAction(
    myArg: string[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestFnNamedArgsSingleStringList(
        myArg
    )

    return stream.toStreamable()
}

export async function TestGeminiAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestGemini(
        input
    )

    return stream.toStreamable()
}

export async function TestImageInputAction(
    img: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestImageInput(
        img
    )

    return stream.toStreamable()
}

export async function TestImageInputAnthropicAction(
    img: Image
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestImageInputAnthropic(
        img
    )

    return stream.toStreamable()
}

export async function TestImageListInputAction(
    imgs: Image[]
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestImageListInput(
        imgs
    )

    return stream.toStreamable()
}

export async function TestMulticlassNamedArgsAction(
    myArg: NamedArgsSingleClass,
    myArg2: NamedArgsSingleClass
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestMulticlassNamedArgs(
        myArg,
        myArg2
    )

    return stream.toStreamable()
}

export async function TestNamedArgsLiteralBoolAction(
    myBool: true
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestNamedArgsLiteralBool(
        myBool
    )

    return stream.toStreamable()
}

export async function TestNamedArgsLiteralIntAction(
    myInt: 1
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestNamedArgsLiteralInt(
        myInt
    )

    return stream.toStreamable()
}

export async function TestNamedArgsLiteralStringAction(
    myString: "My String"
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestNamedArgsLiteralString(
        myString
    )

    return stream.toStreamable()
}

export async function TestOllamaAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestOllama(
        input
    )

    return stream.toStreamable()
}

export async function TestOpenAILegacyProviderAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestOpenAILegacyProvider(
        input
    )

    return stream.toStreamable()
}

export async function TestOpenAIShorthandAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestOpenAIShorthand(
        input
    )

    return stream.toStreamable()
}

export async function TestRetryConstantAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestRetryConstant(
    )

    return stream.toStreamable()
}

export async function TestRetryExponentialAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestRetryExponential(
    )

    return stream.toStreamable()
}

export async function TestSingleFallbackClientAction(
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestSingleFallbackClient(
    )

    return stream.toStreamable()
}

export async function TestVertexAction(
    input: string
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.TestVertex(
        input
    )

    return stream.toStreamable()
}

export async function UnionTest_FunctionAction(
    input: string | boolean
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.UnionTest_Function(
        input
    )

    return stream.toStreamable()
}

export async function UseBlockConstraintAction(
    inp: BlockConstraintForParam
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.UseBlockConstraint(
        inp
    )

    return stream.toStreamable()
}

export async function UseMalformedConstraintsAction(
    a: MalformedConstraints2
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.UseMalformedConstraints(
        a
    )

    return stream.toStreamable()
}

export async function UseNestedBlockConstraintAction(
    inp: NestedBlockConstraintForParam
): Promise<ReadableStream<Uint8Array>> {
    const stream = b.stream.UseNestedBlockConstraint(
        inp
    )

    return stream.toStreamable()
}
