<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="66" failures="1" errors="0" time="35.618">
  <testsuite name="Error Handling Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="4.684" tests="4">
    <testcase classname="Error Handling Tests should raise an error for invalid argument types" name="Error Handling Tests should raise an error for invalid argument types" time="0.002">
    </testcase>
    <testcase classname="Error Handling Tests should raise an error for invalid client configuration" name="Error Handling Tests should raise an error for invalid client configuration" time="0.28">
    </testcase>
    <testcase classname="Error Handling Tests should raise a BAMLValidationError with proper details" name="Error Handling Tests should raise a BAMLValidationError with proper details" time="0.417">
    </testcase>
    <testcase classname="Error Handling Tests should handle client HTTP errors" name="Error Handling Tests should handle client HTTP errors" time="0.147">
    </testcase>
  </testsuite>
  <testsuite name="Tracing Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="6.58" tests="2">
    <testcase classname="Tracing Tests Sync Tracing supports tracing sync" name="Tracing Tests Sync Tracing supports tracing sync" time="0.002">
    </testcase>
    <testcase classname="Tracing Tests Async Tracing supports tracing async" name="Tracing Tests Async Tracing supports tracing async" time="3.096">
    </testcase>
  </testsuite>
  <testsuite name="Anthropic Provider" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="7.875" tests="2">
    <testcase classname="Anthropic Provider should support anthropic shorthand" name="Anthropic Provider should support anthropic shorthand" time="2.639">
    </testcase>
    <testcase classname="Anthropic Provider Streaming should support streaming in Claude" name="Anthropic Provider Streaming should support streaming in Claude" time="1.316">
    </testcase>
  </testsuite>
  <testsuite name="Azure Provider" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="8.749" tests="6">
    <testcase classname="Azure Provider should support azure with default max_tokens" name="Azure Provider should support azure with default max_tokens" time="0.534">
    </testcase>
    <testcase classname="Azure Provider should support o1 model without max_tokens" name="Azure Provider should support o1 model without max_tokens" time="1.628">
    </testcase>
    <testcase classname="Azure Provider should fail when setting max_tokens for o1 model" name="Azure Provider should fail when setting max_tokens for o1 model" time="0.399">
    </testcase>
    <testcase classname="Azure Provider should support non-o1 model with explicit max_tokens" name="Azure Provider should support non-o1 model with explicit max_tokens" time="0.471">
    </testcase>
    <testcase classname="Azure Provider should support o1 model with explicit max_completion_tokens" name="Azure Provider should support o1 model with explicit max_completion_tokens" time="1.836">
    </testcase>
    <testcase classname="Azure Provider should fail if azure is not configured correctly" name="Azure Provider should fail if azure is not configured correctly" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Constraint Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="9.18" tests="4">
    <testcase classname="Constraint Tests should handle checks in return types" name="Constraint Tests should handle checks in return types" time="1.019">
    </testcase>
    <testcase classname="Constraint Tests should handle checks in returned unions" name="Constraint Tests should handle checks in returned unions" time="1.809">
    </testcase>
    <testcase classname="Constraint Tests should handle block-level checks" name="Constraint Tests should handle block-level checks" time="1.54">
    </testcase>
    <testcase classname="Constraint Tests should handle nested-block-level checks" name="Constraint Tests should handle nested-block-level checks" time="0.82">
    </testcase>
  </testsuite>
  <testsuite name="Dynamic Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="10.281" tests="4">
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" time="2.606">
    </testcase>
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" time="0.979">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" time="1.069">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" time="1.735">
    </testcase>
  </testsuite>
  <testsuite name="Recursive Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="12.102" tests="2">
    <testcase classname="Recursive Type Tests simple recursive type" name="Recursive Type Tests simple recursive type" time="4.167">
    </testcase>
    <testcase classname="Recursive Type Tests mutually recursive type" name="Recursive Type Tests mutually recursive type" time="4.087">
    </testcase>
  </testsuite>
  <testsuite name="Memory usage tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="13.089" tests="1">
    <testcase classname="Memory usage tests memory usage stays within limits" name="Memory usage tests memory usage stays within limits" time="9.112">
    </testcase>
  </testsuite>
  <testsuite name="Vertex Provider" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="16.536" tests="2">
    <testcase classname="Vertex Provider should support vertex" name="Vertex Provider should support vertex" time="8.202">
    </testcase>
    <testcase classname="Vertex Provider should support vertex with system_instructions" name="Vertex Provider should support vertex with system_instructions" time="4.259">
    </testcase>
  </testsuite>
  <testsuite name="Gemini Provider" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="20.488" tests="2">
    <testcase classname="Gemini Provider Streaming should support streaming in Gemini" name="Gemini Provider Streaming should support streaming in Gemini" time="9.29">
    </testcase>
    <testcase classname="Gemini Provider system message should support system_instructions in Gemini" name="Gemini Provider system message should support system_instructions in Gemini" time="7.208">
    </testcase>
  </testsuite>
  <testsuite name="AWS Provider" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="29.583" tests="17">
    <testcase classname="AWS Provider should support AWS" name="AWS Provider should support AWS" time="1.568">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS region gracefully" name="AWS Provider should handle invalid AWS region gracefully" time="1.768">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS access key gracefully" name="AWS Provider should handle invalid AWS access key gracefully" time="0.325">
    </testcase>
    <testcase classname="AWS Provider Streaming should support streaming in AWS" name="AWS Provider Streaming should support streaming in AWS" time="1.413">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" name="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" time="7.419">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" name="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" time="0.325">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" name="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" time="0.274">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support dynamic client configuration" name="AWS Provider Dynamic Client Registry should support dynamic client configuration" time="1.391">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS credentials configuration" name="AWS Provider Dynamic Client Registry should support AWS credentials configuration" time="0.316">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS profile configuration" name="AWS Provider Dynamic Client Registry should support AWS profile configuration" time="1.397">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both model and model_id parameters" name="AWS Provider Dynamic Client Registry should support both model and model_id parameters" time="2.685">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" name="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" time="1.695">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" name="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" time="0.278">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" name="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" time="0.585">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when region is not provided" name="AWS Provider Dynamic Client Registry should throw error when region is not provided" time="0">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using invalid profile" name="AWS Provider Dynamic Client Registry should throw error when using invalid profile" time="0">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" name="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" time="4.141">
    </testcase>
  </testsuite>
  <testsuite name="Basic Input/Output Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-06T18:36:44" time="30.627" tests="11">
    <testcase classname="Basic Input/Output Tests Input Types single bool" name="Basic Input/Output Tests Input Types single bool" time="0.653">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single string list" name="Basic Input/Output Tests Input Types single string list" time="0.457">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single class" name="Basic Input/Output Tests Input Types single class" time="0.651">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types multiple classes" name="Basic Input/Output Tests Input Types multiple classes" time="0.585">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single enum list" name="Basic Input/Output Tests Input Types single enum list" time="0.384">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single float" name="Basic Input/Output Tests Input Types single float" time="1.635">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single int" name="Basic Input/Output Tests Input Types single int" time="0.357">
    </testcase>
    <testcase classname="Basic Input/Output Tests Output Types should work for all outputs" name="Basic Input/Output Tests Output Types should work for all outputs" time="9.865">
    </testcase>
    <testcase classname="Basic Input/Output Tests json type alias cycle" name="Basic Input/Output Tests json type alias cycle" time="2.958">
    </testcase>
    <testcase classname="Basic Input/Output Tests json type alias as class dependency" name="Basic Input/Output Tests json type alias as class dependency" time="3.476">
    </testcase>
    <testcase classname="Semantic Streaming Tests should support semantic streaming" name="Semantic Streaming Tests should support semantic streaming" time="5.675">
    </testcase>
  </testsuite>
  <testsuite name="OpenAI Provider" errors="0" failures="1" skipped="0" timestamp="2025-02-06T18:36:44" time="35.415" tests="9">
    <testcase classname="OpenAI Provider should support OpenAI shorthand" name="OpenAI Provider should support OpenAI shorthand" time="0.767">
    </testcase>
    <testcase classname="OpenAI Provider should support openai with default max_tokens" name="OpenAI Provider should support openai with default max_tokens" time="0.988">
    </testcase>
    <testcase classname="OpenAI Provider should support o1 model without max_tokens" name="OpenAI Provider should support o1 model without max_tokens" time="3.165">
    </testcase>
    <testcase classname="OpenAI Provider should fail when setting max_tokens for o1 model" name="OpenAI Provider should fail when setting max_tokens for o1 model" time="0.001">
    </testcase>
    <testcase classname="OpenAI Provider should support non-o1 model with explicit max_tokens" name="OpenAI Provider should support non-o1 model with explicit max_tokens" time="2.689">
    </testcase>
    <testcase classname="OpenAI Provider should support o1 model with explicit max_completion_tokens" name="OpenAI Provider should support o1 model with explicit max_completion_tokens" time="2.032">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;donkey&quot;
Received string:    &quot;**donald kong climbs high,··
pixel vines reach for the sky,··
bananas whisper.**&quot;
    at Object.&lt;anonymous&gt; (/Users/sam/baml2/integ-tests/typescript/tests/providers/openai.test.ts:32:31)</failure>
    </testcase>
    <testcase classname="OpenAI Provider should support openai with null max_tokens" name="OpenAI Provider should support openai with null max_tokens" time="2.019">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming in OpenAI" name="OpenAI Provider Streaming should support streaming in OpenAI" time="7.887">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming without iterating" name="OpenAI Provider Streaming should support streaming without iterating" time="12.042">
    </testcase>
  </testsuite>
</testsuites>