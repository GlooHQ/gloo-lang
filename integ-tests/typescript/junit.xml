<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="54" failures="0" errors="0" time="32.864">
  <testsuite name="Constraint Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="9.941" tests="4">
    <testcase classname="Constraint Tests should handle checks in return types" name="Constraint Tests should handle checks in return types" time="0.82">
    </testcase>
    <testcase classname="Constraint Tests should handle checks in returned unions" name="Constraint Tests should handle checks in returned unions" time="2.323">
    </testcase>
    <testcase classname="Constraint Tests should handle block-level checks" name="Constraint Tests should handle block-level checks" time="0.984">
    </testcase>
    <testcase classname="Constraint Tests should handle nested-block-level checks" name="Constraint Tests should handle nested-block-level checks" time="1.303">
    </testcase>
  </testsuite>
  <testsuite name="Recursive Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="11.237" tests="2">
    <testcase classname="Recursive Type Tests simple recursive type" name="Recursive Type Tests simple recursive type" time="3.357">
    </testcase>
    <testcase classname="Recursive Type Tests mutually recursive type" name="Recursive Type Tests mutually recursive type" time="3.325">
    </testcase>
  </testsuite>
  <testsuite name="Dynamic Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="12.74" tests="4">
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" time="2.142">
    </testcase>
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" time="2.027">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" time="1.29">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" time="2.73">
    </testcase>
  </testsuite>
  <testsuite name="Anthropic Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:14:01" time="3.945" tests="2">
    <testcase classname="Anthropic Provider should support anthropic shorthand" name="Anthropic Provider should support anthropic shorthand" time="2.672">
    </testcase>
    <testcase classname="Anthropic Provider Streaming should support streaming in Claude" name="Anthropic Provider Streaming should support streaming in Claude" time="0.962">
    </testcase>
  </testsuite>
  <testsuite name="Error Handling Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:14:03" time="1.54" tests="4">
    <testcase classname="Error Handling Tests should raise an error for invalid argument types" name="Error Handling Tests should raise an error for invalid argument types" time="0.004">
    </testcase>
    <testcase classname="Error Handling Tests should raise an error for invalid client configuration" name="Error Handling Tests should raise an error for invalid client configuration" time="0.183">
    </testcase>
    <testcase classname="Error Handling Tests should raise a BAMLValidationError with proper details" name="Error Handling Tests should raise a BAMLValidationError with proper details" time="0.823">
    </testcase>
    <testcase classname="Error Handling Tests should handle client HTTP errors" name="Error Handling Tests should handle client HTTP errors" time="0.12">
    </testcase>
  </testsuite>
  <testsuite name="Azure Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:14:05" time="0.864" tests="2">
    <testcase classname="Azure Provider should support azure" name="Azure Provider should support azure" time="0.362">
    </testcase>
    <testcase classname="Azure Provider should fail if azure is not configured" name="Azure Provider should fail if azure is not configured" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="Tracing Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:14:02" time="3.887" tests="2">
    <testcase classname="Tracing Tests Sync Tracing supports tracing sync" name="Tracing Tests Sync Tracing supports tracing sync" time="0">
    </testcase>
    <testcase classname="Tracing Tests Async Tracing supports tracing async" name="Tracing Tests Async Tracing supports tracing async" time="3.687">
    </testcase>
  </testsuite>
  <testsuite name="Memory usage tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="17.321" tests="1">
    <testcase classname="Memory usage tests memory usage stays within limits" name="Memory usage tests memory usage stays within limits" time="12.773">
    </testcase>
  </testsuite>
  <testsuite name="Vertex Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="19.548" tests="2">
    <testcase classname="Vertex Provider should support vertex" name="Vertex Provider should support vertex" time="10.624">
    </testcase>
    <testcase classname="Vertex Provider should support vertex with system_instructions" name="Vertex Provider should support vertex with system_instructions" time="4.426">
    </testcase>
  </testsuite>
  <testsuite name="Gemini Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="24.862" tests="2">
    <testcase classname="Gemini Provider Streaming should support streaming in Gemini" name="Gemini Provider Streaming should support streaming in Gemini" time="11.231">
    </testcase>
    <testcase classname="Gemini Provider system message should support system_instructions in Gemini" name="Gemini Provider system message should support system_instructions in Gemini" time="9.275">
    </testcase>
  </testsuite>
  <testsuite name="Basic Input/Output Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="29.07" tests="9">
    <testcase classname="Basic Input/Output Tests Input Types single bool" name="Basic Input/Output Tests Input Types single bool" time="0.689">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single string list" name="Basic Input/Output Tests Input Types single string list" time="0.786">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single class" name="Basic Input/Output Tests Input Types single class" time="0.925">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types multiple classes" name="Basic Input/Output Tests Input Types multiple classes" time="1.729">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single enum list" name="Basic Input/Output Tests Input Types single enum list" time="0.531">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single float" name="Basic Input/Output Tests Input Types single float" time="0.725">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single int" name="Basic Input/Output Tests Input Types single int" time="0.571">
    </testcase>
    <testcase classname="Basic Input/Output Tests Output Types should work for all outputs" name="Basic Input/Output Tests Output Types should work for all outputs" time="11.634">
    </testcase>
    <testcase classname="Semantic Streaming Tests should support semantic streaming" name="Semantic Streaming Tests should support semantic streaming" time="7.044">
    </testcase>
  </testsuite>
  <testsuite name="AWS Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="30.081" tests="17">
    <testcase classname="AWS Provider should support AWS" name="AWS Provider should support AWS" time="1.623">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS region gracefully" name="AWS Provider should handle invalid AWS region gracefully" time="2.446">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS access key gracefully" name="AWS Provider should handle invalid AWS access key gracefully" time="0.351">
    </testcase>
    <testcase classname="AWS Provider Streaming should support streaming in AWS" name="AWS Provider Streaming should support streaming in AWS" time="1.417">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" name="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" time="6.139">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" name="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" time="0.386">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" name="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" time="0.298">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support dynamic client configuration" name="AWS Provider Dynamic Client Registry should support dynamic client configuration" time="1.355">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS credentials configuration" name="AWS Provider Dynamic Client Registry should support AWS credentials configuration" time="0.343">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS profile configuration" name="AWS Provider Dynamic Client Registry should support AWS profile configuration" time="1.36">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both model and model_id parameters" name="AWS Provider Dynamic Client Registry should support both model and model_id parameters" time="2.854">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" name="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" time="1.431">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" name="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" time="0.378">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" name="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" time="0.65">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when region is not provided" name="AWS Provider Dynamic Client Registry should throw error when region is not provided" time="0.004">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using invalid profile" name="AWS Provider Dynamic Client Registry should throw error when using invalid profile" time="0.001">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" name="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" time="4.146">
    </testcase>
  </testsuite>
  <testsuite name="OpenAI Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-30T06:13:51" time="32.621" tests="3">
    <testcase classname="OpenAI Provider should support OpenAI shorthand" name="OpenAI Provider should support OpenAI shorthand" time="9.07">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming in OpenAI" name="OpenAI Provider Streaming should support streaming in OpenAI" time="9.344">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming without iterating" name="OpenAI Provider Streaming should support streaming without iterating" time="9.771">
    </testcase>
  </testsuite>
</testsuites>