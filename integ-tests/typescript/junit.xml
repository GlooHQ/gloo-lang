<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="52" failures="0" errors="0" time="46.045">
  <testsuite name="Constraint Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="16.212" tests="4">
    <testcase classname="Constraint Tests should handle checks in return types" name="Constraint Tests should handle checks in return types" time="0.864">
    </testcase>
    <testcase classname="Constraint Tests should handle checks in returned unions" name="Constraint Tests should handle checks in returned unions" time="1.19">
    </testcase>
    <testcase classname="Constraint Tests should handle block-level checks" name="Constraint Tests should handle block-level checks" time="0.73">
    </testcase>
    <testcase classname="Constraint Tests should handle nested-block-level checks" name="Constraint Tests should handle nested-block-level checks" time="0.906">
    </testcase>
  </testsuite>
  <testsuite name="Anthropic Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="16.249" tests="2">
    <testcase classname="Anthropic Provider should support anthropic shorthand" name="Anthropic Provider should support anthropic shorthand" time="2.757">
    </testcase>
    <testcase classname="Anthropic Provider Streaming should support streaming in Claude" name="Anthropic Provider Streaming should support streaming in Claude" time="1.229">
    </testcase>
  </testsuite>
  <testsuite name="Dynamic Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="17.816" tests="4">
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types single" time="1.301">
    </testcase>
    <testcase classname="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" name="Dynamic Type Tests Basic Dynamic Types should work with dynamic types enum" time="1.21">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output map" time="1.005">
    </testcase>
    <testcase classname="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" name="Dynamic Type Tests Complex Dynamic Types should work with dynamic output union" time="1.752">
    </testcase>
  </testsuite>
  <testsuite name="Error Handling Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:16" time="1.767" tests="4">
    <testcase classname="Error Handling Tests should raise an error for invalid argument types" name="Error Handling Tests should raise an error for invalid argument types" time="0.001">
    </testcase>
    <testcase classname="Error Handling Tests should raise an error for invalid client configuration" name="Error Handling Tests should raise an error for invalid client configuration" time="0.314">
    </testcase>
    <testcase classname="Error Handling Tests should raise a BAMLValidationError with proper details" name="Error Handling Tests should raise a BAMLValidationError with proper details" time="0.597">
    </testcase>
    <testcase classname="Error Handling Tests should handle client HTTP errors" name="Error Handling Tests should handle client HTTP errors" time="0.179">
    </testcase>
  </testsuite>
  <testsuite name="Azure Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:18" time="1.063" tests="2">
    <testcase classname="Azure Provider should support azure" name="Azure Provider should support azure" time="0.421">
    </testcase>
    <testcase classname="Azure Provider should fail if azure is not configured" name="Azure Provider should fail if azure is not configured" time="0.178">
    </testcase>
  </testsuite>
  <testsuite name="Recursive Type Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="18.699" tests="2">
    <testcase classname="Recursive Type Tests simple recursive type" name="Recursive Type Tests simple recursive type" time="2.941">
    </testcase>
    <testcase classname="Recursive Type Tests mutually recursive type" name="Recursive Type Tests mutually recursive type" time="3.424">
    </testcase>
  </testsuite>
  <testsuite name="Tracing Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:16" time="3.135" tests="2">
    <testcase classname="Tracing Tests Sync Tracing supports tracing sync" name="Tracing Tests Sync Tracing supports tracing sync" time="0.001">
    </testcase>
    <testcase classname="Tracing Tests Async Tracing supports tracing async" name="Tracing Tests Async Tracing supports tracing async" time="2.784">
    </testcase>
  </testsuite>
  <testsuite name="Vertex Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="27.489" tests="2">
    <testcase classname="Vertex Provider should support vertex" name="Vertex Provider should support vertex" time="10.104">
    </testcase>
    <testcase classname="Vertex Provider should support vertex with system_instructions" name="Vertex Provider should support vertex with system_instructions" time="4.859">
    </testcase>
  </testsuite>
  <testsuite name="Basic Input/Output Tests" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="29.503" tests="8">
    <testcase classname="Basic Input/Output Tests Input Types single bool" name="Basic Input/Output Tests Input Types single bool" time="0.535">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single string list" name="Basic Input/Output Tests Input Types single string list" time="6.208">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single class" name="Basic Input/Output Tests Input Types single class" time="4.277">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types multiple classes" name="Basic Input/Output Tests Input Types multiple classes" time="0.631">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single enum list" name="Basic Input/Output Tests Input Types single enum list" time="0.379">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single float" name="Basic Input/Output Tests Input Types single float" time="0.44">
    </testcase>
    <testcase classname="Basic Input/Output Tests Input Types single int" name="Basic Input/Output Tests Input Types single int" time="0.702">
    </testcase>
    <testcase classname="Basic Input/Output Tests Output Types should work for all outputs" name="Basic Input/Output Tests Output Types should work for all outputs" time="4.034">
    </testcase>
  </testsuite>
  <testsuite name="Gemini Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="30.149" tests="2">
    <testcase classname="Gemini Provider Streaming should support streaming in Gemini" name="Gemini Provider Streaming should support streaming in Gemini" time="6.745">
    </testcase>
    <testcase classname="Gemini Provider system message should support system_instructions in Gemini" name="Gemini Provider system message should support system_instructions in Gemini" time="10.837">
    </testcase>
  </testsuite>
  <testsuite name="AWS Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="39.875" tests="17">
    <testcase classname="AWS Provider should support AWS" name="AWS Provider should support AWS" time="2.028">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS region gracefully" name="AWS Provider should handle invalid AWS region gracefully" time="1.882">
    </testcase>
    <testcase classname="AWS Provider should handle invalid AWS access key gracefully" name="AWS Provider should handle invalid AWS access key gracefully" time="0.406">
    </testcase>
    <testcase classname="AWS Provider Streaming should support streaming in AWS" name="AWS Provider Streaming should support streaming in AWS" time="1.504">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" name="AWS Provider Dynamic Client Registry Credential Resolution should handle session credentials correctly" time="6.591">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" name="AWS Provider Dynamic Client Registry Credential Resolution should require region in all environments" time="0.392">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" name="AWS Provider Dynamic Client Registry Credential Resolution should throw error when region is empty or AWS_REGION is unset" time="0.372">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support dynamic client configuration" name="AWS Provider Dynamic Client Registry should support dynamic client configuration" time="1.404">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS credentials configuration" name="AWS Provider Dynamic Client Registry should support AWS credentials configuration" time="0.412">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support AWS profile configuration" name="AWS Provider Dynamic Client Registry should support AWS profile configuration" time="1.407">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both model and model_id parameters" name="AWS Provider Dynamic Client Registry should support both model and model_id parameters" time="2.87">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" name="AWS Provider Dynamic Client Registry should handle invalid configuration gracefully" time="1.72">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" name="AWS Provider Dynamic Client Registry should handle non-existent model gracefully" time="0.36">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" name="AWS Provider Dynamic Client Registry should throw error when using temporary credentials without session token" time="0.754">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when region is not provided" name="AWS Provider Dynamic Client Registry should throw error when region is not provided" time="0">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should throw error when using invalid profile" name="AWS Provider Dynamic Client Registry should throw error when using invalid profile" time="0.002">
    </testcase>
    <testcase classname="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" name="AWS Provider Dynamic Client Registry should support both AWS_REGION and AWS_DEFAULT_REGION environment variables" time="4.398">
    </testcase>
  </testsuite>
  <testsuite name="OpenAI Provider" errors="0" failures="0" skipped="0" timestamp="2025-01-22T19:47:00" time="45.697" tests="3">
    <testcase classname="OpenAI Provider should support OpenAI shorthand" name="OpenAI Provider should support OpenAI shorthand" time="13.711">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming in OpenAI" name="OpenAI Provider Streaming should support streaming in OpenAI" time="9.946">
    </testcase>
    <testcase classname="OpenAI Provider Streaming should support streaming without iterating" name="OpenAI Provider Streaming should support streaming without iterating" time="9.429">
    </testcase>
  </testsuite>
</testsuites>