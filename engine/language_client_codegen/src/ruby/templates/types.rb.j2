# typed: false
require "sorbet-runtime"

module Baml
  {# Baml::Types is reserved for generated types. #}
  module Types
    {#- https://sorbet.org/docs/tenum #}
    {%- for enum in enums %}
    class {{ enum.name }} < T::Enum
      {%- if let Some(docstring) = enum.docstring %}
      {{docstring}}
      {%- endif %}
      {%- if enum.values.len() > 0 %}
      enums do
        {%- for value in enum.values %}
        {{ value }} = new("{{ value }}")
        {%- endfor %}
      end
      {%- endif %}
    end
    {%- endfor %}

    {#- Forward declarations for types #}
    {%- for cls in classes %}
    class {{cls.name}} < T::Struct; end
    {%- endfor %}

    {#- https://sorbet.org/docs/tstruct #}
    {%- for cls in classes %}
    {%- if let Some(docstring) = cls.docstring %}
    {{docstring}}
    {%- endif %}
    class {{cls.name}} < T::Struct
      include Baml::Sorbet::Struct

      {%- for (name, type, m_docstring) in cls.fields %}
      {%- if let Some(docstring) = m_docstring %}
      {{ docstring }}
      {%- endif %}
      const :{{name}}, {{type}}
      {%- endfor %}

      def initialize(props)
        super(
          {%- for (name, _, _) in cls.fields %}
          {{name}}: props[:{{name}}],
          {%- endfor %}
        )

        @props = props
      end
    end
    {%- endfor %}

  end
end
