import { Image } from "@boundaryml/baml"

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}

{%- for enum in enums %}
{%- if let Some(docstring) = enum.docstring %}
{{docstring}}
{%- endif %}
export enum {{enum.name}} {
  {%- for (value, m_docstring) in enum.values %}
  {%- if let Some(docstring) = m_docstring %}
  {{docstring}}
  {%- endif %}
  {{ value }} = "{{ value }}",
  {%- endfor %}
}
{% endfor %}

{%- for cls in classes %}

{%- if let Some(docstring) = cls.docstring %}
{{docstring}}
{%- endif %}
export interface {{cls.name}} {
  {%- for (name, optional, type, m_docstring) in cls.fields %}

  {%- if let Some(docstring) = m_docstring %}
  {{ docstring }}
  {%- endif %}
  {{name}}{% if optional %}?{% endif %}: {{type}}

  {%- endfor %}
  {% if cls.dynamic %}
  [key: string]: any;
  {%- endif %}
}
{% endfor %}

{#- Type Aliases -#}
{% for alias in structural_recursive_alias_cycles %}
type {{alias.name}} = {{alias.target}}
{% endfor %}
