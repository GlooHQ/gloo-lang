'use client'

import { useCallback, useMemo, useReducer, useTransition } from 'react';
import type {
  StreamingProps,
  NonStreamingProps,
  StreamingHookResult,
  NonStreamingHookResult,
  HookProps,
  PartialReturnType,
  FinalReturnType,
  ServerAction,
  BamlStreamResponse,
  ActionKey,
} from './types';
import { BamlValidationError, BamlClientFinishReasonError } from "@boundaryml/baml/errors";
import * as Actions from './server';
import * as StreamingActions from './server_streaming'

/**
 * Type guard to check if the hook props are configured for streaming mode.
 *
 * @template TActionKey - The key of the Actions namespace.
 * @param props - The hook props.
 * @returns {boolean} True if the props indicate streaming mode.
 */
function isStreamingProps<TActionKey extends ActionKey>(
  props: HookProps<TActionKey>
): props is StreamingProps<TActionKey> {
  return props.stream === true;
}

function isBamlError(error?: Error | BamlValidationError | BamlClientFinishReasonError): error is (BamlValidationError | BamlClientFinishReasonError) & { type: string } {
  const errorType = (error as any)?.type;
  return errorType === 'BamlValidationError' || errorType === 'BamlClientFinishReasonError';
}

interface HookState<TPartial, TFinal> {
  isSuccess: boolean;
  error?: Error | BamlValidationError | BamlClientFinishReasonError;
  data?: TFinal;
  partialData?: TPartial;
}

type HookStateAction<TPartial, TFinal> =
  | { type: 'START_REQUEST' }
  | { type: 'SET_ERROR'; payload: Error | BamlValidationError | BamlClientFinishReasonError }
  | { type: 'SET_PARTIAL'; payload: TPartial }
  | { type: 'SET_FINAL'; payload: TFinal }
  | { type: 'RESET' };

/**
 * Reducer function to manage the hook state transitions.
 *
 * @template TPartial - The type of the partial (streaming) data.
 * @template TFinal - The type of the final (non‑streaming) data.
 * @param state - The current hook state.
 * @param action - The action to apply.
 * @returns The updated state.
 */
function hookReducer<TPartial, TFinal>(
  state: HookState<TPartial, TFinal>,
  action: HookStateAction<TPartial, TFinal>
): HookState<TPartial, TFinal> {
  switch (action.type) {
    case 'START_REQUEST':
      return {
        ...state,
        isSuccess: false,
        error: undefined,
        data: undefined,
        partialData: undefined,
      };
    case 'SET_ERROR':
      return {
        ...state,
        isSuccess: false,
        error: action.payload,
        data: undefined,
        partialData: undefined,
      };
    case 'SET_PARTIAL':
      return {
        ...state,
        partialData: action.payload,
      };
    case 'SET_FINAL':
      return {
        ...state,
        isSuccess: true,
        data: action.payload,
        partialData: undefined,
      };
    case 'RESET':
      return {
        isSuccess: false,
        error: undefined,
        data: undefined,
        partialData: undefined,
      };
    default:
      return state;
  }
}

/**
 * Base hook for executing BAML server actions, supporting both streaming and non‑streaming modes.
 *
 * This hook provides a unified interface for handling loading states, partial updates, errors,
 * and final responses. It is designed to be used directly with any BAML server action.
 *
 * Features:
 * - **Streaming Support:** Real‑time partial updates via `partialData`, progress indicators, and incremental UI updates.
 * - **State Management:** Manages loading state (`isPending`), success/error flags, and final/partial results.
 * - **Error Handling:** Supports type‑safe error handling for BamlValidationError, BamlClientFinishReasonError, and standard errors.
 *
 * @param Action - The server action to invoke.
 * @param props - Configuration props for the hook.
 * @returns An object with the current state and a `mutate` function to trigger the action.
 *
 * @example
 * ```tsx
 * const { data, error, isPending, mutate } = useBamlAction(StreamingActions.TestAws, { stream: true });
 * ```
 */
export function useBamlAction<TActionKey extends ActionKey>(
  action: ServerAction,
  props: StreamingProps<TActionKey>
): StreamingHookResult<TActionKey>;

export function useBamlAction<TActionKey extends ActionKey>(
  action: ServerAction,
  props?: NonStreamingProps<TActionKey>
): NonStreamingHookResult<TActionKey>;

export function useBamlAction<TActionKey extends ActionKey>(
  action: ServerAction,
  props: HookProps<TActionKey> = {}
): StreamingHookResult<TActionKey> | NonStreamingHookResult<TActionKey> {
  const { onFinal, onError, onPartial } = props;
  const isStreaming = isStreamingProps(props);
  const [isPending, startTransition] = useTransition();

  const [state, dispatch] = useReducer(
    hookReducer<PartialReturnType<TActionKey>, FinalReturnType<TActionKey>>,
    {
      isSuccess: false,
      error: undefined,
      data: undefined,
      partialData: undefined,
    }
  );

  const mutate = useCallback(
    async (...input: Parameters<ServerAction>) => {
      dispatch({ type: 'START_REQUEST' });
      try {
        let response: Awaited<ReturnType<ServerAction>>;
        startTransition(async () => {
          response = await action(...input);
          if (isStreaming && response instanceof ReadableStream) {
            const reader = response.getReader();
            const decoder = new TextDecoder();
            try {
              while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                if (value) {
                  const chunk = decoder.decode(value, { stream: true }).trim();
                  try {
                    const parsed: BamlStreamResponse<PartialReturnType<TActionKey>, FinalReturnType<TActionKey>> = JSON.parse(chunk);
                    if (parsed.error) {
                      let error: Error | BamlValidationError | BamlClientFinishReasonError = new Error('Unknown error')

                      if (isBamlError(parsed.error)) {
                        if (parsed.error?.type === 'BamlValidationError') {
                          error = new BamlValidationError(
                            parsed.error.prompt,
                            parsed.error.raw_output,
                            parsed.error.message,
                          )
                        } else if (parsed.error.type === 'BamlClientFinishReasonError') {
                          error = new BamlClientFinishReasonError(
                            parsed.error.prompt,
                            parsed.error.raw_output,
                            parsed.error.message,
                          )
                        }
                      } else {
                        error = new Error(parsed.error.message)
                      }
                      throw error;
                    }
                    if (parsed.partial !== undefined) {
                      dispatch({ type: 'SET_PARTIAL', payload: parsed.partial });
                      onPartial?.(parsed.partial);
                    }
                    if (parsed.final !== undefined) {
                      dispatch({ type: 'SET_FINAL', payload: parsed.final });
                      onFinal?.(parsed.final);
                      return;
                    }
                  } catch (err: unknown) {
                    dispatch({ type: "SET_ERROR", payload: err as Error | BamlValidationError | BamlClientFinishReasonError });
                    onError?.(err as Error | BamlValidationError | BamlClientFinishReasonError);
                    break;
                  }
                }
              }
            } finally {
              reader.releaseLock();
            }
            return;
          }
          // Non‑streaming case
          dispatch({ type: 'SET_FINAL', payload: response });
          onFinal?.(response);
        });
        return response;
      } catch (error_: unknown) {
        dispatch({ type: 'SET_ERROR', payload: error_ as Error | BamlValidationError | BamlClientFinishReasonError });
        onError?.(error_ as Error | BamlValidationError | BamlClientFinishReasonError);
        throw error_;
      }
    },
    [action, isStreaming, onPartial, onFinal, onError]
  );

  const status = useMemo<"idle" | "pending" | "success" | "error">(() => {
    if (isPending) return "pending";
    if (state.error) return "error";
    if (state.isSuccess) return "success";
    return "idle";
  }, [isPending, state.error, state.isSuccess]);

  const result = {
    data: state.data,
    error: state.error,
    isError: !!state.error,
    isSuccess: state.isSuccess,
    isPending,
    mutate,
    status,
  };

  return {
    ...result,
    partialData: isStreaming ? state.partialData : undefined,
  };
}

{%- for func in funcs %}
/**
 * A specialized hook for the {{ func.name }} BAML function that supports both streaming and non‑streaming responses.
 *
 * **Input Types:**
 * {%- for (name, optional, type) in func.args %}
 * - {{ name }}{% if optional %} (optional){% endif %}: {{ type }}
 * {%- endfor %}
 *
 * **Return Type:**
 * - **Non‑streaming:** {{ func.return_type }}
 * - **Streaming Partial:** {{ func.partial_return_type }}
 * - **Streaming Final:** {{ func.return_type }}
 *
 * **Usage Patterns:**
 * 1. **Non‑streaming (Default)**
 *    - Best for quick responses and simple UI updates.
 * 2. **Streaming**
 *    - Ideal for long‑running operations or real‑time feedback.
 *
 * **Edge Cases:**
 * - Ensure robust error handling via `onError`.
 * - Handle cases where partial data may be incomplete or missing.
 *
 * @example
 * ```tsx
 * // Basic non‑streaming usage:
 * const { data, error, isPending, mutate } = use{{ func.name }}();
 *
 * // Streaming usage:
 * const { data, partialData, isPending, error, mutate } = use{{ func.name }}({
 *   stream: true,
 *   onPartial: (partial) => console.log('Partial update:', partial),
 *   onFinal: (final) => console.log('Final result:', final),
 *   onError: (err) => console.error('Error:', err),
 * });
 * ```
 */
export function use{{ func.name }}(
  props: StreamingProps<'{{ func.name }}'>
): StreamingHookResult<'{{ func.name }}'>;

export function use{{ func.name }}(
  props?: NonStreamingProps<'{{ func.name }}'>
): NonStreamingHookResult<'{{ func.name }}'>;

export function use{{ func.name }}(
  props: HookProps<'{{ func.name }}'> = {}
): StreamingHookResult<'{{ func.name }}'> | NonStreamingHookResult<'{{ func.name }}'> {
  if (props.stream) {
    return useBamlAction(StreamingActions.{{ func.name }}, props);
  }

  return useBamlAction(Actions.{{ func.name }}, props);
}
{%- endfor %}