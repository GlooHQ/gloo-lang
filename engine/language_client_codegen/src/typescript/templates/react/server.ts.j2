'use server'

import { b } from '../index';
import type { StreamedObject } from './types';
import { Check, Checked, RecursivePartialNull } from "../types"
import { Image, Audio } from "@boundaryml/baml"
import {
  {%- for t in types %}{{ t }}{% if !loop.last %}, {% endif %}{% endfor -%}
} from "../types"

{%- for func in funcs %}
/**
 * Server action for the {{ func.name }} BAML function.
 *
 * Input Types:
 * {%- for (name, optional, type) in func.args %}
 * - {{ name }}{% if optional %} (optional){% endif %}: {{ type }}
 * {%- endfor %}
 *
 * Return Type:
 * - Non-streaming: {{ func.return_type }}
 * - Streaming: ReadableStream
 */
export const {{ func.name }}Action = async (
  {%- for (name, optional, type) in func.args %}
  {{ name }}{% if optional %}?{% endif %}: {{ type }},
  {%- endfor %}
  options?: { stream?: boolean }
) => {
  if (options?.stream) {
    const stream = b.stream.{{ func.name }}(
      {%- for (name, _, _) in func.args %}
      {{ name }},
      {%- endfor %}
    );
    return stream.toStreamable();
  }
  return b.{{ func.name }}(
    {%- for (name, _, _) in func.args %}
    {{ name }},
    {%- endfor %}
  );
};
{% endfor -%}
