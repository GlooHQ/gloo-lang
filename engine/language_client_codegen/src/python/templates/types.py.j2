{#- baml_py must be imported to enable access to baml_py.Image -#}
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))


{# Enums -#}
{% for enum in enums %}
class {{enum.name}}(str, Enum):
    {%- if let Some(docstring) = enum.docstring %}
    {{docstring}}
    {%- endif %}
    {% if enum.values.is_empty() %}pass{% endif %}
    {%- for (value, m_docstring) in enum.values %}
    {{ value }} = "{{ value }}"
    {%- if let Some(docstring) = m_docstring %}
    {{ docstring }}
    {%- endif %}

    {%- endfor %}
{% endfor %}

{#- Classes -#}
{% for cls in classes %}
class {{cls.name}}(BaseModel):
    {%- if let Some(docstring) = cls.docstring %}
    {{docstring}}
    {%- endif %}
    {%- if cls.dynamic %}
    model_config = ConfigDict(extra='allow')
    {%- endif %}
    {%- if cls.fields.is_empty() && !cls.dynamic %}pass{% endif %}
    
    {%- for (name, type, m_docstring) in cls.fields %}
    {{name}}: {{type}}
    {%- if let Some(docstring) = m_docstring %}
    {{ docstring }}

    {%- endif %}
    {%- endfor %}
{% endfor %}
